/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.science.platform.app.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.StagedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the ScienceApp service. Represents a row in the &quot;ScienceApp_ScienceApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.kisti.science.platform.app.model.impl.ScienceAppModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.kisti.science.platform.app.model.impl.ScienceAppImpl}.
 * </p>
 *
 * @author Jerry H. Seo & Young Suh
 * @see ScienceApp
 * @see com.kisti.science.platform.app.model.impl.ScienceAppImpl
 * @see com.kisti.science.platform.app.model.impl.ScienceAppModelImpl
 * @generated
 */
public interface ScienceAppModel extends BaseModel<ScienceApp>, StagedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a science app model instance should use the {@link ScienceApp} interface instead.
	 */

	/**
	 * Returns the primary key of this science app.
	 *
	 * @return the primary key of this science app
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this science app.
	 *
	 * @param primaryKey the primary key of this science app
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this science app.
	 *
	 * @return the uuid of this science app
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this science app.
	 *
	 * @param uuid the uuid of this science app
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the science app ID of this science app.
	 *
	 * @return the science app ID of this science app
	 */
	public long getScienceAppId();

	/**
	 * Sets the science app ID of this science app.
	 *
	 * @param scienceAppId the science app ID of this science app
	 */
	public void setScienceAppId(long scienceAppId);

	/**
	 * Returns the group ID of this science app.
	 *
	 * @return the group ID of this science app
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this science app.
	 *
	 * @param groupId the group ID of this science app
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this science app.
	 *
	 * @return the company ID of this science app
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this science app.
	 *
	 * @param companyId the company ID of this science app
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this science app.
	 *
	 * @return the user ID of this science app
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this science app.
	 *
	 * @param userId the user ID of this science app
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this science app.
	 *
	 * @return the user uuid of this science app
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this science app.
	 *
	 * @param userUuid the user uuid of this science app
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the create date of this science app.
	 *
	 * @return the create date of this science app
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this science app.
	 *
	 * @param createDate the create date of this science app
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this science app.
	 *
	 * @return the modified date of this science app
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this science app.
	 *
	 * @param modifiedDate the modified date of this science app
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the name of this science app.
	 *
	 * @return the name of this science app
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this science app.
	 *
	 * @param name the name of this science app
	 */
	public void setName(String name);

	/**
	 * Returns the version of this science app.
	 *
	 * @return the version of this science app
	 */
	@AutoEscape
	public String getVersion();

	/**
	 * Sets the version of this science app.
	 *
	 * @param version the version of this science app
	 */
	public void setVersion(String version);

	/**
	 * Returns the title of this science app.
	 *
	 * @return the title of this science app
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this science app in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this science app
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this science app in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this science app. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this science app in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this science app
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this science app in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this science app
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this science app.
	 *
	 * @return the locales and localized titles of this science app
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this science app.
	 *
	 * @param title the title of this science app
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this science app in the language.
	 *
	 * @param title the localized title of this science app
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this science app in the language, and sets the default locale.
	 *
	 * @param title the localized title of this science app
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this science app from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this science app
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this science app from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this science app
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description ID of this science app.
	 *
	 * @return the description ID of this science app
	 */
	public long getDescriptionId();

	/**
	 * Sets the description ID of this science app.
	 *
	 * @param descriptionId the description ID of this science app
	 */
	public void setDescriptionId(long descriptionId);

	/**
	 * Returns the previous version ID of this science app.
	 *
	 * @return the previous version ID of this science app
	 */
	public long getPreviousVersionId();

	/**
	 * Sets the previous version ID of this science app.
	 *
	 * @param previousVersionId the previous version ID of this science app
	 */
	public void setPreviousVersionId(long previousVersionId);

	/**
	 * Returns the icon ID of this science app.
	 *
	 * @return the icon ID of this science app
	 */
	public long getIconId();

	/**
	 * Sets the icon ID of this science app.
	 *
	 * @param iconId the icon ID of this science app
	 */
	public void setIconId(long iconId);

	/**
	 * Returns the manual ID of this science app.
	 *
	 * @return the manual ID of this science app
	 */
	public long getManualId();

	/**
	 * Sets the manual ID of this science app.
	 *
	 * @param manualId the manual ID of this science app
	 */
	public void setManualId(long manualId);

	/**
	 * Returns the exe file name of this science app.
	 *
	 * @return the exe file name of this science app
	 */
	@AutoEscape
	public String getExeFileName();

	/**
	 * Sets the exe file name of this science app.
	 *
	 * @param exeFileName the exe file name of this science app
	 */
	public void setExeFileName(String exeFileName);

	/**
	 * Returns the app type of this science app.
	 *
	 * @return the app type of this science app
	 */
	@AutoEscape
	public String getAppType();

	/**
	 * Sets the app type of this science app.
	 *
	 * @param appType the app type of this science app
	 */
	public void setAppType(String appType);

	/**
	 * Returns the run type of this science app.
	 *
	 * @return the run type of this science app
	 */
	@AutoEscape
	public String getRunType();

	/**
	 * Sets the run type of this science app.
	 *
	 * @param runType the run type of this science app
	 */
	public void setRunType(String runType);

	/**
	 * Returns the author ID of this science app.
	 *
	 * @return the author ID of this science app
	 */
	public long getAuthorId();

	/**
	 * Sets the author ID of this science app.
	 *
	 * @param authorId the author ID of this science app
	 */
	public void setAuthorId(long authorId);

	/**
	 * Returns the stage of this science app.
	 *
	 * @return the stage of this science app
	 */
	@AutoEscape
	public String getStage();

	/**
	 * Sets the stage of this science app.
	 *
	 * @param stage the stage of this science app
	 */
	public void setStage(String stage);

	/**
	 * Returns the status of this science app.
	 *
	 * @return the status of this science app
	 */
	public int getStatus();

	/**
	 * Sets the status of this science app.
	 *
	 * @param status the status of this science app
	 */
	public void setStatus(int status);

	/**
	 * Returns the recent modifier ID of this science app.
	 *
	 * @return the recent modifier ID of this science app
	 */
	public long getRecentModifierId();

	/**
	 * Sets the recent modifier ID of this science app.
	 *
	 * @param recentModifierId the recent modifier ID of this science app
	 */
	public void setRecentModifierId(long recentModifierId);

	/**
	 * Returns the parallel module of this science app.
	 *
	 * @return the parallel module of this science app
	 */
	@AutoEscape
	public String getParallelModule();

	/**
	 * Sets the parallel module of this science app.
	 *
	 * @param parallelModule the parallel module of this science app
	 */
	public void setParallelModule(String parallelModule);

	/**
	 * Returns the status date of this science app.
	 *
	 * @return the status date of this science app
	 */
	public Date getStatusDate();

	/**
	 * Sets the status date of this science app.
	 *
	 * @param statusDate the status date of this science app
	 */
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the open level of this science app.
	 *
	 * @return the open level of this science app
	 */
	@AutoEscape
	public String getOpenLevel();

	/**
	 * Sets the open level of this science app.
	 *
	 * @param openLevel the open level of this science app
	 */
	public void setOpenLevel(String openLevel);

	/**
	 * Returns the license of this science app.
	 *
	 * @return the license of this science app
	 */
	@AutoEscape
	public String getLicense();

	/**
	 * Sets the license of this science app.
	 *
	 * @param license the license of this science app
	 */
	public void setLicense(String license);

	/**
	 * Returns the src file name of this science app.
	 *
	 * @return the src file name of this science app
	 */
	@AutoEscape
	public String getSrcFileName();

	/**
	 * Sets the src file name of this science app.
	 *
	 * @param srcFileName the src file name of this science app
	 */
	public void setSrcFileName(String srcFileName);

	/**
	 * Returns the target language of this science app.
	 *
	 * @return the target language of this science app
	 */
	@AutoEscape
	public String getTargetLanguage();

	/**
	 * Sets the target language of this science app.
	 *
	 * @param targetLanguage the target language of this science app
	 */
	public void setTargetLanguage(String targetLanguage);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(
		com.kisti.science.platform.app.model.ScienceApp scienceApp);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.kisti.science.platform.app.model.ScienceApp> toCacheModel();

	@Override
	public com.kisti.science.platform.app.model.ScienceApp toEscapedModel();

	@Override
	public com.kisti.science.platform.app.model.ScienceApp toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}