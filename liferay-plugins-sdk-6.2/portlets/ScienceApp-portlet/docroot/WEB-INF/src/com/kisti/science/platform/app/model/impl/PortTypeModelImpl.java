/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.science.platform.app.model.impl;

import com.kisti.science.platform.app.model.PortType;
import com.kisti.science.platform.app.model.PortTypeModel;
import com.kisti.science.platform.app.model.PortTypeSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PortType service. Represents a row in the &quot;ScienceApp_PortType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.science.platform.app.model.PortTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortTypeImpl}.
 * </p>
 *
 * @author Jerry H. Seo & Young Suh
 * @see PortTypeImpl
 * @see com.kisti.science.platform.app.model.PortType
 * @see com.kisti.science.platform.app.model.PortTypeModel
 * @generated
 */
@JSON(strict = true)
public class PortTypeModelImpl extends BaseModelImpl<PortType>
	implements PortTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a port type model instance should use the {@link com.kisti.science.platform.app.model.PortType} interface instead.
	 */
	public static final String TABLE_NAME = "ScienceApp_PortType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "portTypeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "defaultEditorId", Types.BIGINT },
			{ "defaultAnalyzerId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "dataType", Types.VARCHAR },
			{ "sampleFilePath", Types.VARCHAR },
			{ "targetLanguage", Types.VARCHAR },
			{ "status", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ScienceApp_PortType (uuid_ VARCHAR(75) null,portTypeId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,defaultEditorId LONG,defaultAnalyzerId LONG,name VARCHAR(75) null,dataType VARCHAR(75) null,sampleFilePath VARCHAR(75) null,targetLanguage VARCHAR(75) null,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ScienceApp_PortType";
	public static final String ORDER_BY_JPQL = " ORDER BY portType.portTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ScienceApp_PortType.portTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.science.platform.app.model.PortType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.science.platform.app.model.PortType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.science.platform.app.model.PortType"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long NAME_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long PORTTYPEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PortType toModel(PortTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PortType model = new PortTypeImpl();

		model.setUuid(soapModel.getUuid());
		model.setPortTypeId(soapModel.getPortTypeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setDefaultEditorId(soapModel.getDefaultEditorId());
		model.setDefaultAnalyzerId(soapModel.getDefaultAnalyzerId());
		model.setName(soapModel.getName());
		model.setDataType(soapModel.getDataType());
		model.setSampleFilePath(soapModel.getSampleFilePath());
		model.setTargetLanguage(soapModel.getTargetLanguage());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PortType> toModels(PortTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PortType> models = new ArrayList<PortType>(soapModels.length);

		for (PortTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.science.platform.app.model.PortType"));

	public PortTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _portTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPortTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _portTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PortType.class;
	}

	@Override
	public String getModelClassName() {
		return PortType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("portTypeId", getPortTypeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("defaultEditorId", getDefaultEditorId());
		attributes.put("defaultAnalyzerId", getDefaultAnalyzerId());
		attributes.put("name", getName());
		attributes.put("dataType", getDataType());
		attributes.put("sampleFilePath", getSampleFilePath());
		attributes.put("targetLanguage", getTargetLanguage());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long portTypeId = (Long)attributes.get("portTypeId");

		if (portTypeId != null) {
			setPortTypeId(portTypeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long defaultEditorId = (Long)attributes.get("defaultEditorId");

		if (defaultEditorId != null) {
			setDefaultEditorId(defaultEditorId);
		}

		Long defaultAnalyzerId = (Long)attributes.get("defaultAnalyzerId");

		if (defaultAnalyzerId != null) {
			setDefaultAnalyzerId(defaultAnalyzerId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String dataType = (String)attributes.get("dataType");

		if (dataType != null) {
			setDataType(dataType);
		}

		String sampleFilePath = (String)attributes.get("sampleFilePath");

		if (sampleFilePath != null) {
			setSampleFilePath(sampleFilePath);
		}

		String targetLanguage = (String)attributes.get("targetLanguage");

		if (targetLanguage != null) {
			setTargetLanguage(targetLanguage);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPortTypeId() {
		return _portTypeId;
	}

	@Override
	public void setPortTypeId(long portTypeId) {
		_portTypeId = portTypeId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getDefaultEditorId() {
		return _defaultEditorId;
	}

	@Override
	public void setDefaultEditorId(long defaultEditorId) {
		_defaultEditorId = defaultEditorId;
	}

	@JSON
	@Override
	public long getDefaultAnalyzerId() {
		return _defaultAnalyzerId;
	}

	@Override
	public void setDefaultAnalyzerId(long defaultAnalyzerId) {
		_defaultAnalyzerId = defaultAnalyzerId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDataType() {
		if (_dataType == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataType;
		}
	}

	@Override
	public void setDataType(String dataType) {
		_dataType = dataType;
	}

	@JSON
	@Override
	public String getSampleFilePath() {
		if (_sampleFilePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleFilePath;
		}
	}

	@Override
	public void setSampleFilePath(String sampleFilePath) {
		_sampleFilePath = sampleFilePath;
	}

	@JSON
	@Override
	public String getTargetLanguage() {
		if (_targetLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetLanguage;
		}
	}

	@Override
	public void setTargetLanguage(String targetLanguage) {
		_targetLanguage = targetLanguage;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PortType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortTypeImpl portTypeImpl = new PortTypeImpl();

		portTypeImpl.setUuid(getUuid());
		portTypeImpl.setPortTypeId(getPortTypeId());
		portTypeImpl.setCompanyId(getCompanyId());
		portTypeImpl.setUserId(getUserId());
		portTypeImpl.setCreateDate(getCreateDate());
		portTypeImpl.setDefaultEditorId(getDefaultEditorId());
		portTypeImpl.setDefaultAnalyzerId(getDefaultAnalyzerId());
		portTypeImpl.setName(getName());
		portTypeImpl.setDataType(getDataType());
		portTypeImpl.setSampleFilePath(getSampleFilePath());
		portTypeImpl.setTargetLanguage(getTargetLanguage());
		portTypeImpl.setStatus(getStatus());

		portTypeImpl.resetOriginalValues();

		return portTypeImpl;
	}

	@Override
	public int compareTo(PortType portType) {
		long primaryKey = portType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortType)) {
			return false;
		}

		PortType portType = (PortType)obj;

		long primaryKey = portType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortTypeModelImpl portTypeModelImpl = this;

		portTypeModelImpl._originalUuid = portTypeModelImpl._uuid;

		portTypeModelImpl._originalCompanyId = portTypeModelImpl._companyId;

		portTypeModelImpl._setOriginalCompanyId = false;

		portTypeModelImpl._originalName = portTypeModelImpl._name;

		portTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortType> toCacheModel() {
		PortTypeCacheModel portTypeCacheModel = new PortTypeCacheModel();

		portTypeCacheModel.uuid = getUuid();

		String uuid = portTypeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			portTypeCacheModel.uuid = null;
		}

		portTypeCacheModel.portTypeId = getPortTypeId();

		portTypeCacheModel.companyId = getCompanyId();

		portTypeCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			portTypeCacheModel.createDate = createDate.getTime();
		}
		else {
			portTypeCacheModel.createDate = Long.MIN_VALUE;
		}

		portTypeCacheModel.defaultEditorId = getDefaultEditorId();

		portTypeCacheModel.defaultAnalyzerId = getDefaultAnalyzerId();

		portTypeCacheModel.name = getName();

		String name = portTypeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			portTypeCacheModel.name = null;
		}

		portTypeCacheModel.dataType = getDataType();

		String dataType = portTypeCacheModel.dataType;

		if ((dataType != null) && (dataType.length() == 0)) {
			portTypeCacheModel.dataType = null;
		}

		portTypeCacheModel.sampleFilePath = getSampleFilePath();

		String sampleFilePath = portTypeCacheModel.sampleFilePath;

		if ((sampleFilePath != null) && (sampleFilePath.length() == 0)) {
			portTypeCacheModel.sampleFilePath = null;
		}

		portTypeCacheModel.targetLanguage = getTargetLanguage();

		String targetLanguage = portTypeCacheModel.targetLanguage;

		if ((targetLanguage != null) && (targetLanguage.length() == 0)) {
			portTypeCacheModel.targetLanguage = null;
		}

		portTypeCacheModel.status = getStatus();

		String status = portTypeCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			portTypeCacheModel.status = null;
		}

		return portTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", portTypeId=");
		sb.append(getPortTypeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", defaultEditorId=");
		sb.append(getDefaultEditorId());
		sb.append(", defaultAnalyzerId=");
		sb.append(getDefaultAnalyzerId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", dataType=");
		sb.append(getDataType());
		sb.append(", sampleFilePath=");
		sb.append(getSampleFilePath());
		sb.append(", targetLanguage=");
		sb.append(getTargetLanguage());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.kisti.science.platform.app.model.PortType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portTypeId</column-name><column-value><![CDATA[");
		sb.append(getPortTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultEditorId</column-name><column-value><![CDATA[");
		sb.append(getDefaultEditorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultAnalyzerId</column-name><column-value><![CDATA[");
		sb.append(getDefaultAnalyzerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataType</column-name><column-value><![CDATA[");
		sb.append(getDataType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleFilePath</column-name><column-value><![CDATA[");
		sb.append(getSampleFilePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetLanguage</column-name><column-value><![CDATA[");
		sb.append(getTargetLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortType.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _portTypeId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private long _defaultEditorId;
	private long _defaultAnalyzerId;
	private String _name;
	private String _originalName;
	private String _dataType;
	private String _sampleFilePath;
	private String _targetLanguage;
	private String _status;
	private long _columnBitmask;
	private PortType _escapedModel;
}