/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.science.platform.app.model.impl;

import com.kisti.science.platform.app.model.PortTypeInputdeckForm;
import com.kisti.science.platform.app.model.PortTypeInputdeckFormModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PortTypeInputdeckForm service. Represents a row in the &quot;ScienceApp_PortTypeInputdeckForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.science.platform.app.model.PortTypeInputdeckFormModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortTypeInputdeckFormImpl}.
 * </p>
 *
 * @author Jerry H. Seo & Young Suh
 * @see PortTypeInputdeckFormImpl
 * @see com.kisti.science.platform.app.model.PortTypeInputdeckForm
 * @see com.kisti.science.platform.app.model.PortTypeInputdeckFormModel
 * @generated
 */
public class PortTypeInputdeckFormModelImpl extends BaseModelImpl<PortTypeInputdeckForm>
	implements PortTypeInputdeckFormModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a port type inputdeck form model instance should use the {@link com.kisti.science.platform.app.model.PortTypeInputdeckForm} interface instead.
	 */
	public static final String TABLE_NAME = "ScienceApp_PortTypeInputdeckForm";
	public static final Object[][] TABLE_COLUMNS = {
			{ "portTypeId", Types.BIGINT },
			{ "inputdeckForm", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ScienceApp_PortTypeInputdeckForm (portTypeId LONG not null primary key,inputdeckForm VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ScienceApp_PortTypeInputdeckForm";
	public static final String ORDER_BY_JPQL = " ORDER BY portTypeInputdeckForm.portTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ScienceApp_PortTypeInputdeckForm.portTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.science.platform.app.model.PortTypeInputdeckForm"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.science.platform.app.model.PortTypeInputdeckForm"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.science.platform.app.model.PortTypeInputdeckForm"));

	public PortTypeInputdeckFormModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _portTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPortTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _portTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PortTypeInputdeckForm.class;
	}

	@Override
	public String getModelClassName() {
		return PortTypeInputdeckForm.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("portTypeId", getPortTypeId());
		attributes.put("inputdeckForm", getInputdeckForm());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long portTypeId = (Long)attributes.get("portTypeId");

		if (portTypeId != null) {
			setPortTypeId(portTypeId);
		}

		String inputdeckForm = (String)attributes.get("inputdeckForm");

		if (inputdeckForm != null) {
			setInputdeckForm(inputdeckForm);
		}
	}

	@Override
	public long getPortTypeId() {
		return _portTypeId;
	}

	@Override
	public void setPortTypeId(long portTypeId) {
		_portTypeId = portTypeId;
	}

	@Override
	public String getInputdeckForm() {
		if (_inputdeckForm == null) {
			return StringPool.BLANK;
		}
		else {
			return _inputdeckForm;
		}
	}

	@Override
	public void setInputdeckForm(String inputdeckForm) {
		_inputdeckForm = inputdeckForm;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PortTypeInputdeckForm.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortTypeInputdeckForm toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortTypeInputdeckForm)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortTypeInputdeckFormImpl portTypeInputdeckFormImpl = new PortTypeInputdeckFormImpl();

		portTypeInputdeckFormImpl.setPortTypeId(getPortTypeId());
		portTypeInputdeckFormImpl.setInputdeckForm(getInputdeckForm());

		portTypeInputdeckFormImpl.resetOriginalValues();

		return portTypeInputdeckFormImpl;
	}

	@Override
	public int compareTo(PortTypeInputdeckForm portTypeInputdeckForm) {
		long primaryKey = portTypeInputdeckForm.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortTypeInputdeckForm)) {
			return false;
		}

		PortTypeInputdeckForm portTypeInputdeckForm = (PortTypeInputdeckForm)obj;

		long primaryKey = portTypeInputdeckForm.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PortTypeInputdeckForm> toCacheModel() {
		PortTypeInputdeckFormCacheModel portTypeInputdeckFormCacheModel = new PortTypeInputdeckFormCacheModel();

		portTypeInputdeckFormCacheModel.portTypeId = getPortTypeId();

		portTypeInputdeckFormCacheModel.inputdeckForm = getInputdeckForm();

		String inputdeckForm = portTypeInputdeckFormCacheModel.inputdeckForm;

		if ((inputdeckForm != null) && (inputdeckForm.length() == 0)) {
			portTypeInputdeckFormCacheModel.inputdeckForm = null;
		}

		return portTypeInputdeckFormCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{portTypeId=");
		sb.append(getPortTypeId());
		sb.append(", inputdeckForm=");
		sb.append(getInputdeckForm());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.kisti.science.platform.app.model.PortTypeInputdeckForm");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>portTypeId</column-name><column-value><![CDATA[");
		sb.append(getPortTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputdeckForm</column-name><column-value><![CDATA[");
		sb.append(getInputdeckForm());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortTypeInputdeckForm.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortTypeInputdeckForm.class
		};
	private long _portTypeId;
	private String _inputdeckForm;
	private PortTypeInputdeckForm _escapedModel;
}