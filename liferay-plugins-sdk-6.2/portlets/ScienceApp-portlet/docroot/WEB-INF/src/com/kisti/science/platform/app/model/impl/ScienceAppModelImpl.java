/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.science.platform.app.model.impl;

import com.kisti.science.platform.app.model.ScienceApp;
import com.kisti.science.platform.app.model.ScienceAppModel;
import com.kisti.science.platform.app.model.ScienceAppSoap;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the ScienceApp service. Represents a row in the &quot;ScienceApp_ScienceApp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.science.platform.app.model.ScienceAppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ScienceAppImpl}.
 * </p>
 *
 * @author Jerry H. Seo & Young Suh
 * @see ScienceAppImpl
 * @see com.kisti.science.platform.app.model.ScienceApp
 * @see com.kisti.science.platform.app.model.ScienceAppModel
 * @generated
 */
@JSON(strict = true)
public class ScienceAppModelImpl extends BaseModelImpl<ScienceApp>
	implements ScienceAppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a science app model instance should use the {@link com.kisti.science.platform.app.model.ScienceApp} interface instead.
	 */
	public static final String TABLE_NAME = "ScienceApp_ScienceApp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "scienceAppId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "descriptionId", Types.BIGINT },
			{ "previousVersionId", Types.BIGINT },
			{ "iconId", Types.BIGINT },
			{ "manualId", Types.BIGINT },
			{ "exeFileName", Types.VARCHAR },
			{ "appType", Types.VARCHAR },
			{ "runType", Types.VARCHAR },
			{ "authorId", Types.BIGINT },
			{ "stage", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "recentModifierId", Types.BIGINT },
			{ "parallelModule", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "openLevel", Types.VARCHAR },
			{ "license", Types.VARCHAR },
			{ "srcFileName", Types.VARCHAR },
			{ "targetLanguage", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ScienceApp_ScienceApp (uuid_ VARCHAR(75) null,scienceAppId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,version VARCHAR(75) null,title STRING null,descriptionId LONG,previousVersionId LONG,iconId LONG,manualId LONG,exeFileName VARCHAR(256) null,appType VARCHAR(75) null,runType VARCHAR(75) null,authorId LONG,stage VARCHAR(75) null,status INTEGER,recentModifierId LONG,parallelModule VARCHAR(75) null,statusDate DATE null,openLevel VARCHAR(75) null,license VARCHAR(75) null,srcFileName VARCHAR(256) null,targetLanguage VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ScienceApp_ScienceApp";
	public static final String ORDER_BY_JPQL = " ORDER BY scienceApp.createDate DESC, scienceApp.version DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ScienceApp_ScienceApp.createDate DESC, ScienceApp_ScienceApp.version DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.science.platform.app.model.ScienceApp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.science.platform.app.model.ScienceApp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.science.platform.app.model.ScienceApp"),
			true);
	public static long APPTYPE_COLUMN_BITMASK = 1L;
	public static long AUTHORID_COLUMN_BITMASK = 2L;
	public static long COMPANYID_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long NAME_COLUMN_BITMASK = 16L;
	public static long OPENLEVEL_COLUMN_BITMASK = 32L;
	public static long RUNTYPE_COLUMN_BITMASK = 64L;
	public static long STAGE_COLUMN_BITMASK = 128L;
	public static long STATUS_COLUMN_BITMASK = 256L;
	public static long TARGETLANGUAGE_COLUMN_BITMASK = 512L;
	public static long TITLE_COLUMN_BITMASK = 1024L;
	public static long UUID_COLUMN_BITMASK = 2048L;
	public static long VERSION_COLUMN_BITMASK = 4096L;
	public static long CREATEDATE_COLUMN_BITMASK = 8192L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ScienceApp toModel(ScienceAppSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ScienceApp model = new ScienceAppImpl();

		model.setUuid(soapModel.getUuid());
		model.setScienceAppId(soapModel.getScienceAppId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setVersion(soapModel.getVersion());
		model.setTitle(soapModel.getTitle());
		model.setDescriptionId(soapModel.getDescriptionId());
		model.setPreviousVersionId(soapModel.getPreviousVersionId());
		model.setIconId(soapModel.getIconId());
		model.setManualId(soapModel.getManualId());
		model.setExeFileName(soapModel.getExeFileName());
		model.setAppType(soapModel.getAppType());
		model.setRunType(soapModel.getRunType());
		model.setAuthorId(soapModel.getAuthorId());
		model.setStage(soapModel.getStage());
		model.setStatus(soapModel.getStatus());
		model.setRecentModifierId(soapModel.getRecentModifierId());
		model.setParallelModule(soapModel.getParallelModule());
		model.setStatusDate(soapModel.getStatusDate());
		model.setOpenLevel(soapModel.getOpenLevel());
		model.setLicense(soapModel.getLicense());
		model.setSrcFileName(soapModel.getSrcFileName());
		model.setTargetLanguage(soapModel.getTargetLanguage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ScienceApp> toModels(ScienceAppSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ScienceApp> models = new ArrayList<ScienceApp>(soapModels.length);

		for (ScienceAppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.science.platform.app.model.ScienceApp"));

	public ScienceAppModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setScienceAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _scienceAppId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ScienceApp.class;
	}

	@Override
	public String getModelClassName() {
		return ScienceApp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("scienceAppId", getScienceAppId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("version", getVersion());
		attributes.put("title", getTitle());
		attributes.put("descriptionId", getDescriptionId());
		attributes.put("previousVersionId", getPreviousVersionId());
		attributes.put("iconId", getIconId());
		attributes.put("manualId", getManualId());
		attributes.put("exeFileName", getExeFileName());
		attributes.put("appType", getAppType());
		attributes.put("runType", getRunType());
		attributes.put("authorId", getAuthorId());
		attributes.put("stage", getStage());
		attributes.put("status", getStatus());
		attributes.put("recentModifierId", getRecentModifierId());
		attributes.put("parallelModule", getParallelModule());
		attributes.put("statusDate", getStatusDate());
		attributes.put("openLevel", getOpenLevel());
		attributes.put("license", getLicense());
		attributes.put("srcFileName", getSrcFileName());
		attributes.put("targetLanguage", getTargetLanguage());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long scienceAppId = (Long)attributes.get("scienceAppId");

		if (scienceAppId != null) {
			setScienceAppId(scienceAppId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Long descriptionId = (Long)attributes.get("descriptionId");

		if (descriptionId != null) {
			setDescriptionId(descriptionId);
		}

		Long previousVersionId = (Long)attributes.get("previousVersionId");

		if (previousVersionId != null) {
			setPreviousVersionId(previousVersionId);
		}

		Long iconId = (Long)attributes.get("iconId");

		if (iconId != null) {
			setIconId(iconId);
		}

		Long manualId = (Long)attributes.get("manualId");

		if (manualId != null) {
			setManualId(manualId);
		}

		String exeFileName = (String)attributes.get("exeFileName");

		if (exeFileName != null) {
			setExeFileName(exeFileName);
		}

		String appType = (String)attributes.get("appType");

		if (appType != null) {
			setAppType(appType);
		}

		String runType = (String)attributes.get("runType");

		if (runType != null) {
			setRunType(runType);
		}

		Long authorId = (Long)attributes.get("authorId");

		if (authorId != null) {
			setAuthorId(authorId);
		}

		String stage = (String)attributes.get("stage");

		if (stage != null) {
			setStage(stage);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long recentModifierId = (Long)attributes.get("recentModifierId");

		if (recentModifierId != null) {
			setRecentModifierId(recentModifierId);
		}

		String parallelModule = (String)attributes.get("parallelModule");

		if (parallelModule != null) {
			setParallelModule(parallelModule);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String openLevel = (String)attributes.get("openLevel");

		if (openLevel != null) {
			setOpenLevel(openLevel);
		}

		String license = (String)attributes.get("license");

		if (license != null) {
			setLicense(license);
		}

		String srcFileName = (String)attributes.get("srcFileName");

		if (srcFileName != null) {
			setSrcFileName(srcFileName);
		}

		String targetLanguage = (String)attributes.get("targetLanguage");

		if (targetLanguage != null) {
			setTargetLanguage(targetLanguage);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getScienceAppId() {
		return _scienceAppId;
	}

	@Override
	public void setScienceAppId(long scienceAppId) {
		_scienceAppId = scienceAppId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_columnBitmask = -1L;

		if (_originalVersion == null) {
			_originalVersion = _version;
		}

		_version = version;
	}

	public String getOriginalVersion() {
		return GetterUtil.getString(_originalVersion);
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getTitle(), languageId,
			useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(LocalizationUtil.updateLocalization(getTitle(), "Title",
					title, languageId, defaultLanguageId));
		}
		else {
			setTitle(LocalizationUtil.removeLocalization(getTitle(), "Title",
					languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getDefault());
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale) {
		if (titleMap == null) {
			return;
		}

		setTitle(LocalizationUtil.updateLocalization(titleMap, getTitle(),
				"Title", LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public long getDescriptionId() {
		return _descriptionId;
	}

	@Override
	public void setDescriptionId(long descriptionId) {
		_descriptionId = descriptionId;
	}

	@JSON
	@Override
	public long getPreviousVersionId() {
		return _previousVersionId;
	}

	@Override
	public void setPreviousVersionId(long previousVersionId) {
		_previousVersionId = previousVersionId;
	}

	@JSON
	@Override
	public long getIconId() {
		return _iconId;
	}

	@Override
	public void setIconId(long iconId) {
		_iconId = iconId;
	}

	@JSON
	@Override
	public long getManualId() {
		return _manualId;
	}

	@Override
	public void setManualId(long manualId) {
		_manualId = manualId;
	}

	@JSON
	@Override
	public String getExeFileName() {
		if (_exeFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _exeFileName;
		}
	}

	@Override
	public void setExeFileName(String exeFileName) {
		_exeFileName = exeFileName;
	}

	@JSON
	@Override
	public String getAppType() {
		if (_appType == null) {
			return StringPool.BLANK;
		}
		else {
			return _appType;
		}
	}

	@Override
	public void setAppType(String appType) {
		_columnBitmask |= APPTYPE_COLUMN_BITMASK;

		if (_originalAppType == null) {
			_originalAppType = _appType;
		}

		_appType = appType;
	}

	public String getOriginalAppType() {
		return GetterUtil.getString(_originalAppType);
	}

	@JSON
	@Override
	public String getRunType() {
		if (_runType == null) {
			return StringPool.BLANK;
		}
		else {
			return _runType;
		}
	}

	@Override
	public void setRunType(String runType) {
		_columnBitmask |= RUNTYPE_COLUMN_BITMASK;

		if (_originalRunType == null) {
			_originalRunType = _runType;
		}

		_runType = runType;
	}

	public String getOriginalRunType() {
		return GetterUtil.getString(_originalRunType);
	}

	@JSON
	@Override
	public long getAuthorId() {
		return _authorId;
	}

	@Override
	public void setAuthorId(long authorId) {
		_columnBitmask |= AUTHORID_COLUMN_BITMASK;

		if (!_setOriginalAuthorId) {
			_setOriginalAuthorId = true;

			_originalAuthorId = _authorId;
		}

		_authorId = authorId;
	}

	public long getOriginalAuthorId() {
		return _originalAuthorId;
	}

	@JSON
	@Override
	public String getStage() {
		if (_stage == null) {
			return StringPool.BLANK;
		}
		else {
			return _stage;
		}
	}

	@Override
	public void setStage(String stage) {
		_columnBitmask |= STAGE_COLUMN_BITMASK;

		if (_originalStage == null) {
			_originalStage = _stage;
		}

		_stage = stage;
	}

	public String getOriginalStage() {
		return GetterUtil.getString(_originalStage);
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getRecentModifierId() {
		return _recentModifierId;
	}

	@Override
	public void setRecentModifierId(long recentModifierId) {
		_recentModifierId = recentModifierId;
	}

	@JSON
	@Override
	public String getParallelModule() {
		if (_parallelModule == null) {
			return StringPool.BLANK;
		}
		else {
			return _parallelModule;
		}
	}

	@Override
	public void setParallelModule(String parallelModule) {
		_parallelModule = parallelModule;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getOpenLevel() {
		if (_openLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _openLevel;
		}
	}

	@Override
	public void setOpenLevel(String openLevel) {
		_columnBitmask |= OPENLEVEL_COLUMN_BITMASK;

		if (_originalOpenLevel == null) {
			_originalOpenLevel = _openLevel;
		}

		_openLevel = openLevel;
	}

	public String getOriginalOpenLevel() {
		return GetterUtil.getString(_originalOpenLevel);
	}

	@JSON
	@Override
	public String getLicense() {
		if (_license == null) {
			return StringPool.BLANK;
		}
		else {
			return _license;
		}
	}

	@Override
	public void setLicense(String license) {
		_license = license;
	}

	@JSON
	@Override
	public String getSrcFileName() {
		if (_srcFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _srcFileName;
		}
	}

	@Override
	public void setSrcFileName(String srcFileName) {
		_srcFileName = srcFileName;
	}

	@JSON
	@Override
	public String getTargetLanguage() {
		if (_targetLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _targetLanguage;
		}
	}

	@Override
	public void setTargetLanguage(String targetLanguage) {
		_columnBitmask |= TARGETLANGUAGE_COLUMN_BITMASK;

		if (_originalTargetLanguage == null) {
			_originalTargetLanguage = _targetLanguage;
		}

		_targetLanguage = targetLanguage;
	}

	public String getOriginalTargetLanguage() {
		return GetterUtil.getString(_originalTargetLanguage);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ScienceApp.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ScienceApp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public ScienceApp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ScienceApp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ScienceAppImpl scienceAppImpl = new ScienceAppImpl();

		scienceAppImpl.setUuid(getUuid());
		scienceAppImpl.setScienceAppId(getScienceAppId());
		scienceAppImpl.setGroupId(getGroupId());
		scienceAppImpl.setCompanyId(getCompanyId());
		scienceAppImpl.setUserId(getUserId());
		scienceAppImpl.setCreateDate(getCreateDate());
		scienceAppImpl.setModifiedDate(getModifiedDate());
		scienceAppImpl.setName(getName());
		scienceAppImpl.setVersion(getVersion());
		scienceAppImpl.setTitle(getTitle());
		scienceAppImpl.setDescriptionId(getDescriptionId());
		scienceAppImpl.setPreviousVersionId(getPreviousVersionId());
		scienceAppImpl.setIconId(getIconId());
		scienceAppImpl.setManualId(getManualId());
		scienceAppImpl.setExeFileName(getExeFileName());
		scienceAppImpl.setAppType(getAppType());
		scienceAppImpl.setRunType(getRunType());
		scienceAppImpl.setAuthorId(getAuthorId());
		scienceAppImpl.setStage(getStage());
		scienceAppImpl.setStatus(getStatus());
		scienceAppImpl.setRecentModifierId(getRecentModifierId());
		scienceAppImpl.setParallelModule(getParallelModule());
		scienceAppImpl.setStatusDate(getStatusDate());
		scienceAppImpl.setOpenLevel(getOpenLevel());
		scienceAppImpl.setLicense(getLicense());
		scienceAppImpl.setSrcFileName(getSrcFileName());
		scienceAppImpl.setTargetLanguage(getTargetLanguage());

		scienceAppImpl.resetOriginalValues();

		return scienceAppImpl;
	}

	@Override
	public int compareTo(ScienceApp scienceApp) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), scienceApp.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getVersion().compareTo(scienceApp.getVersion());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ScienceApp)) {
			return false;
		}

		ScienceApp scienceApp = (ScienceApp)obj;

		long primaryKey = scienceApp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ScienceAppModelImpl scienceAppModelImpl = this;

		scienceAppModelImpl._originalUuid = scienceAppModelImpl._uuid;

		scienceAppModelImpl._originalGroupId = scienceAppModelImpl._groupId;

		scienceAppModelImpl._setOriginalGroupId = false;

		scienceAppModelImpl._originalCompanyId = scienceAppModelImpl._companyId;

		scienceAppModelImpl._setOriginalCompanyId = false;

		scienceAppModelImpl._originalName = scienceAppModelImpl._name;

		scienceAppModelImpl._originalVersion = scienceAppModelImpl._version;

		scienceAppModelImpl._originalTitle = scienceAppModelImpl._title;

		scienceAppModelImpl._originalAppType = scienceAppModelImpl._appType;

		scienceAppModelImpl._originalRunType = scienceAppModelImpl._runType;

		scienceAppModelImpl._originalAuthorId = scienceAppModelImpl._authorId;

		scienceAppModelImpl._setOriginalAuthorId = false;

		scienceAppModelImpl._originalStage = scienceAppModelImpl._stage;

		scienceAppModelImpl._originalStatus = scienceAppModelImpl._status;

		scienceAppModelImpl._setOriginalStatus = false;

		scienceAppModelImpl._originalOpenLevel = scienceAppModelImpl._openLevel;

		scienceAppModelImpl._originalTargetLanguage = scienceAppModelImpl._targetLanguage;

		scienceAppModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ScienceApp> toCacheModel() {
		ScienceAppCacheModel scienceAppCacheModel = new ScienceAppCacheModel();

		scienceAppCacheModel.uuid = getUuid();

		String uuid = scienceAppCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			scienceAppCacheModel.uuid = null;
		}

		scienceAppCacheModel.scienceAppId = getScienceAppId();

		scienceAppCacheModel.groupId = getGroupId();

		scienceAppCacheModel.companyId = getCompanyId();

		scienceAppCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			scienceAppCacheModel.createDate = createDate.getTime();
		}
		else {
			scienceAppCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			scienceAppCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			scienceAppCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		scienceAppCacheModel.name = getName();

		String name = scienceAppCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			scienceAppCacheModel.name = null;
		}

		scienceAppCacheModel.version = getVersion();

		String version = scienceAppCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			scienceAppCacheModel.version = null;
		}

		scienceAppCacheModel.title = getTitle();

		String title = scienceAppCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			scienceAppCacheModel.title = null;
		}

		scienceAppCacheModel.descriptionId = getDescriptionId();

		scienceAppCacheModel.previousVersionId = getPreviousVersionId();

		scienceAppCacheModel.iconId = getIconId();

		scienceAppCacheModel.manualId = getManualId();

		scienceAppCacheModel.exeFileName = getExeFileName();

		String exeFileName = scienceAppCacheModel.exeFileName;

		if ((exeFileName != null) && (exeFileName.length() == 0)) {
			scienceAppCacheModel.exeFileName = null;
		}

		scienceAppCacheModel.appType = getAppType();

		String appType = scienceAppCacheModel.appType;

		if ((appType != null) && (appType.length() == 0)) {
			scienceAppCacheModel.appType = null;
		}

		scienceAppCacheModel.runType = getRunType();

		String runType = scienceAppCacheModel.runType;

		if ((runType != null) && (runType.length() == 0)) {
			scienceAppCacheModel.runType = null;
		}

		scienceAppCacheModel.authorId = getAuthorId();

		scienceAppCacheModel.stage = getStage();

		String stage = scienceAppCacheModel.stage;

		if ((stage != null) && (stage.length() == 0)) {
			scienceAppCacheModel.stage = null;
		}

		scienceAppCacheModel.status = getStatus();

		scienceAppCacheModel.recentModifierId = getRecentModifierId();

		scienceAppCacheModel.parallelModule = getParallelModule();

		String parallelModule = scienceAppCacheModel.parallelModule;

		if ((parallelModule != null) && (parallelModule.length() == 0)) {
			scienceAppCacheModel.parallelModule = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			scienceAppCacheModel.statusDate = statusDate.getTime();
		}
		else {
			scienceAppCacheModel.statusDate = Long.MIN_VALUE;
		}

		scienceAppCacheModel.openLevel = getOpenLevel();

		String openLevel = scienceAppCacheModel.openLevel;

		if ((openLevel != null) && (openLevel.length() == 0)) {
			scienceAppCacheModel.openLevel = null;
		}

		scienceAppCacheModel.license = getLicense();

		String license = scienceAppCacheModel.license;

		if ((license != null) && (license.length() == 0)) {
			scienceAppCacheModel.license = null;
		}

		scienceAppCacheModel.srcFileName = getSrcFileName();

		String srcFileName = scienceAppCacheModel.srcFileName;

		if ((srcFileName != null) && (srcFileName.length() == 0)) {
			scienceAppCacheModel.srcFileName = null;
		}

		scienceAppCacheModel.targetLanguage = getTargetLanguage();

		String targetLanguage = scienceAppCacheModel.targetLanguage;

		if ((targetLanguage != null) && (targetLanguage.length() == 0)) {
			scienceAppCacheModel.targetLanguage = null;
		}

		return scienceAppCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(55);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", scienceAppId=");
		sb.append(getScienceAppId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", descriptionId=");
		sb.append(getDescriptionId());
		sb.append(", previousVersionId=");
		sb.append(getPreviousVersionId());
		sb.append(", iconId=");
		sb.append(getIconId());
		sb.append(", manualId=");
		sb.append(getManualId());
		sb.append(", exeFileName=");
		sb.append(getExeFileName());
		sb.append(", appType=");
		sb.append(getAppType());
		sb.append(", runType=");
		sb.append(getRunType());
		sb.append(", authorId=");
		sb.append(getAuthorId());
		sb.append(", stage=");
		sb.append(getStage());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", recentModifierId=");
		sb.append(getRecentModifierId());
		sb.append(", parallelModule=");
		sb.append(getParallelModule());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", openLevel=");
		sb.append(getOpenLevel());
		sb.append(", license=");
		sb.append(getLicense());
		sb.append(", srcFileName=");
		sb.append(getSrcFileName());
		sb.append(", targetLanguage=");
		sb.append(getTargetLanguage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(85);

		sb.append("<model><model-name>");
		sb.append("com.kisti.science.platform.app.model.ScienceApp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scienceAppId</column-name><column-value><![CDATA[");
		sb.append(getScienceAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descriptionId</column-name><column-value><![CDATA[");
		sb.append(getDescriptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousVersionId</column-name><column-value><![CDATA[");
		sb.append(getPreviousVersionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iconId</column-name><column-value><![CDATA[");
		sb.append(getIconId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>manualId</column-name><column-value><![CDATA[");
		sb.append(getManualId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exeFileName</column-name><column-value><![CDATA[");
		sb.append(getExeFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appType</column-name><column-value><![CDATA[");
		sb.append(getAppType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>runType</column-name><column-value><![CDATA[");
		sb.append(getRunType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authorId</column-name><column-value><![CDATA[");
		sb.append(getAuthorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stage</column-name><column-value><![CDATA[");
		sb.append(getStage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recentModifierId</column-name><column-value><![CDATA[");
		sb.append(getRecentModifierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parallelModule</column-name><column-value><![CDATA[");
		sb.append(getParallelModule());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openLevel</column-name><column-value><![CDATA[");
		sb.append(getOpenLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>license</column-name><column-value><![CDATA[");
		sb.append(getLicense());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>srcFileName</column-name><column-value><![CDATA[");
		sb.append(getSrcFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>targetLanguage</column-name><column-value><![CDATA[");
		sb.append(getTargetLanguage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ScienceApp.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ScienceApp.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _scienceAppId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _originalName;
	private String _version;
	private String _originalVersion;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _originalTitle;
	private long _descriptionId;
	private long _previousVersionId;
	private long _iconId;
	private long _manualId;
	private String _exeFileName;
	private String _appType;
	private String _originalAppType;
	private String _runType;
	private String _originalRunType;
	private long _authorId;
	private long _originalAuthorId;
	private boolean _setOriginalAuthorId;
	private String _stage;
	private String _originalStage;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _recentModifierId;
	private String _parallelModule;
	private Date _statusDate;
	private String _openLevel;
	private String _originalOpenLevel;
	private String _license;
	private String _srcFileName;
	private String _targetLanguage;
	private String _originalTargetLanguage;
	private long _columnBitmask;
	private ScienceApp _escapedModel;
}