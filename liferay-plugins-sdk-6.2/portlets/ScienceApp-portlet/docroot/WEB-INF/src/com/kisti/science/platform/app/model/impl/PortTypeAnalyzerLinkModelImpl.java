/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.kisti.science.platform.app.model.impl;

import com.kisti.science.platform.app.model.PortTypeAnalyzerLink;
import com.kisti.science.platform.app.model.PortTypeAnalyzerLinkModel;
import com.kisti.science.platform.app.model.PortTypeAnalyzerLinkSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PortTypeAnalyzerLink service. Represents a row in the &quot;ScienceApp_PortTypeAnalyzerLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.kisti.science.platform.app.model.PortTypeAnalyzerLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortTypeAnalyzerLinkImpl}.
 * </p>
 *
 * @author Jerry H. Seo & Young Suh
 * @see PortTypeAnalyzerLinkImpl
 * @see com.kisti.science.platform.app.model.PortTypeAnalyzerLink
 * @see com.kisti.science.platform.app.model.PortTypeAnalyzerLinkModel
 * @generated
 */
@JSON(strict = true)
public class PortTypeAnalyzerLinkModelImpl extends BaseModelImpl<PortTypeAnalyzerLink>
	implements PortTypeAnalyzerLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a port type analyzer link model instance should use the {@link com.kisti.science.platform.app.model.PortTypeAnalyzerLink} interface instead.
	 */
	public static final String TABLE_NAME = "ScienceApp_PortTypeAnalyzerLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "portTypeAnalyzerLinkId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "portTypeId", Types.BIGINT },
			{ "analyzerId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ScienceApp_PortTypeAnalyzerLink (uuid_ VARCHAR(75) null,portTypeAnalyzerLinkId LONG not null primary key,companyId LONG,portTypeId LONG,analyzerId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ScienceApp_PortTypeAnalyzerLink";
	public static final String ORDER_BY_JPQL = " ORDER BY portTypeAnalyzerLink.portTypeAnalyzerLinkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ScienceApp_PortTypeAnalyzerLink.portTypeAnalyzerLinkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.kisti.science.platform.app.model.PortTypeAnalyzerLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.kisti.science.platform.app.model.PortTypeAnalyzerLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.kisti.science.platform.app.model.PortTypeAnalyzerLink"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long PORTTYPEID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long PORTTYPEANALYZERLINKID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static PortTypeAnalyzerLink toModel(
		PortTypeAnalyzerLinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PortTypeAnalyzerLink model = new PortTypeAnalyzerLinkImpl();

		model.setUuid(soapModel.getUuid());
		model.setPortTypeAnalyzerLinkId(soapModel.getPortTypeAnalyzerLinkId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setPortTypeId(soapModel.getPortTypeId());
		model.setAnalyzerId(soapModel.getAnalyzerId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<PortTypeAnalyzerLink> toModels(
		PortTypeAnalyzerLinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<PortTypeAnalyzerLink> models = new ArrayList<PortTypeAnalyzerLink>(soapModels.length);

		for (PortTypeAnalyzerLinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.kisti.science.platform.app.model.PortTypeAnalyzerLink"));

	public PortTypeAnalyzerLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _portTypeAnalyzerLinkId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPortTypeAnalyzerLinkId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _portTypeAnalyzerLinkId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PortTypeAnalyzerLink.class;
	}

	@Override
	public String getModelClassName() {
		return PortTypeAnalyzerLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("portTypeAnalyzerLinkId", getPortTypeAnalyzerLinkId());
		attributes.put("companyId", getCompanyId());
		attributes.put("portTypeId", getPortTypeId());
		attributes.put("analyzerId", getAnalyzerId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long portTypeAnalyzerLinkId = (Long)attributes.get(
				"portTypeAnalyzerLinkId");

		if (portTypeAnalyzerLinkId != null) {
			setPortTypeAnalyzerLinkId(portTypeAnalyzerLinkId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long portTypeId = (Long)attributes.get("portTypeId");

		if (portTypeId != null) {
			setPortTypeId(portTypeId);
		}

		Long analyzerId = (Long)attributes.get("analyzerId");

		if (analyzerId != null) {
			setAnalyzerId(analyzerId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPortTypeAnalyzerLinkId() {
		return _portTypeAnalyzerLinkId;
	}

	@Override
	public void setPortTypeAnalyzerLinkId(long portTypeAnalyzerLinkId) {
		_portTypeAnalyzerLinkId = portTypeAnalyzerLinkId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getPortTypeId() {
		return _portTypeId;
	}

	@Override
	public void setPortTypeId(long portTypeId) {
		_columnBitmask |= PORTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalPortTypeId) {
			_setOriginalPortTypeId = true;

			_originalPortTypeId = _portTypeId;
		}

		_portTypeId = portTypeId;
	}

	public long getOriginalPortTypeId() {
		return _originalPortTypeId;
	}

	@JSON
	@Override
	public long getAnalyzerId() {
		return _analyzerId;
	}

	@Override
	public void setAnalyzerId(long analyzerId) {
		_analyzerId = analyzerId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PortTypeAnalyzerLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortTypeAnalyzerLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PortTypeAnalyzerLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PortTypeAnalyzerLinkImpl portTypeAnalyzerLinkImpl = new PortTypeAnalyzerLinkImpl();

		portTypeAnalyzerLinkImpl.setUuid(getUuid());
		portTypeAnalyzerLinkImpl.setPortTypeAnalyzerLinkId(getPortTypeAnalyzerLinkId());
		portTypeAnalyzerLinkImpl.setCompanyId(getCompanyId());
		portTypeAnalyzerLinkImpl.setPortTypeId(getPortTypeId());
		portTypeAnalyzerLinkImpl.setAnalyzerId(getAnalyzerId());

		portTypeAnalyzerLinkImpl.resetOriginalValues();

		return portTypeAnalyzerLinkImpl;
	}

	@Override
	public int compareTo(PortTypeAnalyzerLink portTypeAnalyzerLink) {
		long primaryKey = portTypeAnalyzerLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PortTypeAnalyzerLink)) {
			return false;
		}

		PortTypeAnalyzerLink portTypeAnalyzerLink = (PortTypeAnalyzerLink)obj;

		long primaryKey = portTypeAnalyzerLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortTypeAnalyzerLinkModelImpl portTypeAnalyzerLinkModelImpl = this;

		portTypeAnalyzerLinkModelImpl._originalUuid = portTypeAnalyzerLinkModelImpl._uuid;

		portTypeAnalyzerLinkModelImpl._originalCompanyId = portTypeAnalyzerLinkModelImpl._companyId;

		portTypeAnalyzerLinkModelImpl._setOriginalCompanyId = false;

		portTypeAnalyzerLinkModelImpl._originalPortTypeId = portTypeAnalyzerLinkModelImpl._portTypeId;

		portTypeAnalyzerLinkModelImpl._setOriginalPortTypeId = false;

		portTypeAnalyzerLinkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortTypeAnalyzerLink> toCacheModel() {
		PortTypeAnalyzerLinkCacheModel portTypeAnalyzerLinkCacheModel = new PortTypeAnalyzerLinkCacheModel();

		portTypeAnalyzerLinkCacheModel.uuid = getUuid();

		String uuid = portTypeAnalyzerLinkCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			portTypeAnalyzerLinkCacheModel.uuid = null;
		}

		portTypeAnalyzerLinkCacheModel.portTypeAnalyzerLinkId = getPortTypeAnalyzerLinkId();

		portTypeAnalyzerLinkCacheModel.companyId = getCompanyId();

		portTypeAnalyzerLinkCacheModel.portTypeId = getPortTypeId();

		portTypeAnalyzerLinkCacheModel.analyzerId = getAnalyzerId();

		return portTypeAnalyzerLinkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", portTypeAnalyzerLinkId=");
		sb.append(getPortTypeAnalyzerLinkId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", portTypeId=");
		sb.append(getPortTypeId());
		sb.append(", analyzerId=");
		sb.append(getAnalyzerId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.kisti.science.platform.app.model.PortTypeAnalyzerLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portTypeAnalyzerLinkId</column-name><column-value><![CDATA[");
		sb.append(getPortTypeAnalyzerLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portTypeId</column-name><column-value><![CDATA[");
		sb.append(getPortTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>analyzerId</column-name><column-value><![CDATA[");
		sb.append(getAnalyzerId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortTypeAnalyzerLink.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PortTypeAnalyzerLink.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _portTypeAnalyzerLinkId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _portTypeId;
	private long _originalPortTypeId;
	private boolean _setOriginalPortTypeId;
	private long _analyzerId;
	private long _columnBitmask;
	private PortTypeAnalyzerLink _escapedModel;
}