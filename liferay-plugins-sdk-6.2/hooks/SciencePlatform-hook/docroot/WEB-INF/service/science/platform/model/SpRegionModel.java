/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the SpRegion service. Represents a row in the &quot;SciencePlatformHook_SpRegion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link science.platform.model.impl.SpRegionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link science.platform.model.impl.SpRegionImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpRegion
 * @see science.platform.model.impl.SpRegionImpl
 * @see science.platform.model.impl.SpRegionModelImpl
 * @generated
 */
public interface SpRegionModel extends BaseModel<SpRegion> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a sp region model instance should use the {@link SpRegion} interface instead.
	 */

	/**
	 * Returns the primary key of this sp region.
	 *
	 * @return the primary key of this sp region
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this sp region.
	 *
	 * @param primaryKey the primary key of this sp region
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the sp region ID of this sp region.
	 *
	 * @return the sp region ID of this sp region
	 */
	public long getSpRegionId();

	/**
	 * Sets the sp region ID of this sp region.
	 *
	 * @param spRegionId the sp region ID of this sp region
	 */
	public void setSpRegionId(long spRegionId);

	/**
	 * Returns the sp country ID of this sp region.
	 *
	 * @return the sp country ID of this sp region
	 */
	public long getSpCountryId();

	/**
	 * Sets the sp country ID of this sp region.
	 *
	 * @param spCountryId the sp country ID of this sp region
	 */
	public void setSpCountryId(long spCountryId);

	/**
	 * Returns the sp region code of this sp region.
	 *
	 * @return the sp region code of this sp region
	 */
	@AutoEscape
	public String getSpRegionCode();

	/**
	 * Sets the sp region code of this sp region.
	 *
	 * @param spRegionCode the sp region code of this sp region
	 */
	public void setSpRegionCode(String spRegionCode);

	/**
	 * Returns the sp region name of this sp region.
	 *
	 * @return the sp region name of this sp region
	 */
	public String getSpRegionName();

	/**
	 * Returns the localized sp region name of this sp region in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized sp region name of this sp region
	 */
	@AutoEscape
	public String getSpRegionName(Locale locale);

	/**
	 * Returns the localized sp region name of this sp region in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized sp region name of this sp region. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getSpRegionName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized sp region name of this sp region in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized sp region name of this sp region
	 */
	@AutoEscape
	public String getSpRegionName(String languageId);

	/**
	 * Returns the localized sp region name of this sp region in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized sp region name of this sp region
	 */
	@AutoEscape
	public String getSpRegionName(String languageId, boolean useDefault);

	@AutoEscape
	public String getSpRegionNameCurrentLanguageId();

	@AutoEscape
	public String getSpRegionNameCurrentValue();

	/**
	 * Returns a map of the locales and localized sp region names of this sp region.
	 *
	 * @return the locales and localized sp region names of this sp region
	 */
	public Map<Locale, String> getSpRegionNameMap();

	/**
	 * Sets the sp region name of this sp region.
	 *
	 * @param spRegionName the sp region name of this sp region
	 */
	public void setSpRegionName(String spRegionName);

	/**
	 * Sets the localized sp region name of this sp region in the language.
	 *
	 * @param spRegionName the localized sp region name of this sp region
	 * @param locale the locale of the language
	 */
	public void setSpRegionName(String spRegionName, Locale locale);

	/**
	 * Sets the localized sp region name of this sp region in the language, and sets the default locale.
	 *
	 * @param spRegionName the localized sp region name of this sp region
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setSpRegionName(String spRegionName, Locale locale,
		Locale defaultLocale);

	public void setSpRegionNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized sp region names of this sp region from the map of locales and localized sp region names.
	 *
	 * @param spRegionNameMap the locales and localized sp region names of this sp region
	 */
	public void setSpRegionNameMap(Map<Locale, String> spRegionNameMap);

	/**
	 * Sets the localized sp region names of this sp region from the map of locales and localized sp region names, and sets the default locale.
	 *
	 * @param spRegionNameMap the locales and localized sp region names of this sp region
	 * @param defaultLocale the default locale
	 */
	public void setSpRegionNameMap(Map<Locale, String> spRegionNameMap,
		Locale defaultLocale);

	/**
	 * Returns the sp active of this sp region.
	 *
	 * @return the sp active of this sp region
	 */
	public boolean getSpActive();

	/**
	 * Returns <code>true</code> if this sp region is sp active.
	 *
	 * @return <code>true</code> if this sp region is sp active; <code>false</code> otherwise
	 */
	public boolean isSpActive();

	/**
	 * Sets whether this sp region is sp active.
	 *
	 * @param spActive the sp active of this sp region
	 */
	public void setSpActive(boolean spActive);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(science.platform.model.SpRegion spRegion);

	@Override
	public int hashCode();

	@Override
	public CacheModel<science.platform.model.SpRegion> toCacheModel();

	@Override
	public science.platform.model.SpRegion toEscapedModel();

	@Override
	public science.platform.model.SpRegion toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}