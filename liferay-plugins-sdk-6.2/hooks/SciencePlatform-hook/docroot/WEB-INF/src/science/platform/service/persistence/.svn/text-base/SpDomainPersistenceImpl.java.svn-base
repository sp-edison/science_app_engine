/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.service.persistence;

import com.liferay.portal.kernel.cache.CacheRegistryUtil;
import com.liferay.portal.kernel.dao.orm.EntityCacheUtil;
import com.liferay.portal.kernel.dao.orm.FinderCacheUtil;
import com.liferay.portal.kernel.dao.orm.FinderPath;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryPos;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.InstanceFactory;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PropsKeys;
import com.liferay.portal.kernel.util.PropsUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.UnmodifiableList;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.ModelListener;
import com.liferay.portal.service.persistence.impl.BasePersistenceImpl;

import science.platform.NoSuchSpDomainException;

import science.platform.model.SpDomain;
import science.platform.model.impl.SpDomainImpl;
import science.platform.model.impl.SpDomainModelImpl;

import java.io.Serializable;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * The persistence implementation for the sp domain service.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpDomainPersistence
 * @see SpDomainUtil
 * @generated
 */
public class SpDomainPersistenceImpl extends BasePersistenceImpl<SpDomain>
	implements SpDomainPersistence {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link SpDomainUtil} to access the sp domain persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */
	public static final String FINDER_CLASS_NAME_ENTITY = SpDomainImpl.class.getName();
	public static final String FINDER_CLASS_NAME_LIST_WITH_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List1";
	public static final String FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List2";
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_ALL = new FinderPath(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainModelImpl.FINDER_CACHE_ENABLED, SpDomainImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL = new FinderPath(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainModelImpl.FINDER_CACHE_ENABLED, SpDomainImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_COUNT_ALL = new FinderPath(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countAll", new String[0]);
	public static final FinderPath FINDER_PATH_FETCH_BY_DOMAINCODE = new FinderPath(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainModelImpl.FINDER_CACHE_ENABLED, SpDomainImpl.class,
			FINDER_CLASS_NAME_ENTITY, "fetchByDomainCode",
			new String[] { String.class.getName() },
			SpDomainModelImpl.SPDOMAINCODE_COLUMN_BITMASK);
	public static final FinderPath FINDER_PATH_COUNT_BY_DOMAINCODE = new FinderPath(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countByDomainCode",
			new String[] { String.class.getName() });

	/**
	 * Returns the sp domain where spDomainCode = &#63; or throws a {@link science.platform.NoSuchSpDomainException} if it could not be found.
	 *
	 * @param spDomainCode the sp domain code
	 * @return the matching sp domain
	 * @throws science.platform.NoSuchSpDomainException if a matching sp domain could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain findByDomainCode(String spDomainCode)
		throws NoSuchSpDomainException, SystemException {
		SpDomain spDomain = fetchByDomainCode(spDomainCode);

		if (spDomain == null) {
			StringBundler msg = new StringBundler(4);

			msg.append(_NO_SUCH_ENTITY_WITH_KEY);

			msg.append("spDomainCode=");
			msg.append(spDomainCode);

			msg.append(StringPool.CLOSE_CURLY_BRACE);

			if (_log.isWarnEnabled()) {
				_log.warn(msg.toString());
			}

			throw new NoSuchSpDomainException(msg.toString());
		}

		return spDomain;
	}

	/**
	 * Returns the sp domain where spDomainCode = &#63; or returns <code>null</code> if it could not be found. Uses the finder cache.
	 *
	 * @param spDomainCode the sp domain code
	 * @return the matching sp domain, or <code>null</code> if a matching sp domain could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain fetchByDomainCode(String spDomainCode)
		throws SystemException {
		return fetchByDomainCode(spDomainCode, true);
	}

	/**
	 * Returns the sp domain where spDomainCode = &#63; or returns <code>null</code> if it could not be found, optionally using the finder cache.
	 *
	 * @param spDomainCode the sp domain code
	 * @param retrieveFromCache whether to use the finder cache
	 * @return the matching sp domain, or <code>null</code> if a matching sp domain could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain fetchByDomainCode(String spDomainCode,
		boolean retrieveFromCache) throws SystemException {
		Object[] finderArgs = new Object[] { spDomainCode };

		Object result = null;

		if (retrieveFromCache) {
			result = FinderCacheUtil.getResult(FINDER_PATH_FETCH_BY_DOMAINCODE,
					finderArgs, this);
		}

		if (result instanceof SpDomain) {
			SpDomain spDomain = (SpDomain)result;

			if (!Validator.equals(spDomainCode, spDomain.getSpDomainCode())) {
				result = null;
			}
		}

		if (result == null) {
			StringBundler query = new StringBundler(3);

			query.append(_SQL_SELECT_SPDOMAIN_WHERE);

			boolean bindSpDomainCode = false;

			if (spDomainCode == null) {
				query.append(_FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_1);
			}
			else if (spDomainCode.equals(StringPool.BLANK)) {
				query.append(_FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_3);
			}
			else {
				bindSpDomainCode = true;

				query.append(_FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_2);
			}

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				if (bindSpDomainCode) {
					qPos.add(spDomainCode);
				}

				List<SpDomain> list = q.list();

				if (list.isEmpty()) {
					FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_DOMAINCODE,
						finderArgs, list);
				}
				else {
					SpDomain spDomain = list.get(0);

					result = spDomain;

					cacheResult(spDomain);

					if ((spDomain.getSpDomainCode() == null) ||
							!spDomain.getSpDomainCode().equals(spDomainCode)) {
						FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_DOMAINCODE,
							finderArgs, spDomain);
					}
				}
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_DOMAINCODE,
					finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		if (result instanceof List<?>) {
			return null;
		}
		else {
			return (SpDomain)result;
		}
	}

	/**
	 * Removes the sp domain where spDomainCode = &#63; from the database.
	 *
	 * @param spDomainCode the sp domain code
	 * @return the sp domain that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain removeByDomainCode(String spDomainCode)
		throws NoSuchSpDomainException, SystemException {
		SpDomain spDomain = findByDomainCode(spDomainCode);

		return remove(spDomain);
	}

	/**
	 * Returns the number of sp domains where spDomainCode = &#63;.
	 *
	 * @param spDomainCode the sp domain code
	 * @return the number of matching sp domains
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int countByDomainCode(String spDomainCode) throws SystemException {
		FinderPath finderPath = FINDER_PATH_COUNT_BY_DOMAINCODE;

		Object[] finderArgs = new Object[] { spDomainCode };

		Long count = (Long)FinderCacheUtil.getResult(finderPath, finderArgs,
				this);

		if (count == null) {
			StringBundler query = new StringBundler(2);

			query.append(_SQL_COUNT_SPDOMAIN_WHERE);

			boolean bindSpDomainCode = false;

			if (spDomainCode == null) {
				query.append(_FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_1);
			}
			else if (spDomainCode.equals(StringPool.BLANK)) {
				query.append(_FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_3);
			}
			else {
				bindSpDomainCode = true;

				query.append(_FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_2);
			}

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				if (bindSpDomainCode) {
					qPos.add(spDomainCode);
				}

				count = (Long)q.uniqueResult();

				FinderCacheUtil.putResult(finderPath, finderArgs, count);
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	private static final String _FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_1 = "spDomain.spDomainCode IS NULL";
	private static final String _FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_2 = "spDomain.spDomainCode = ?";
	private static final String _FINDER_COLUMN_DOMAINCODE_SPDOMAINCODE_3 = "(spDomain.spDomainCode IS NULL OR spDomain.spDomainCode = '')";

	public SpDomainPersistenceImpl() {
		setModelClass(SpDomain.class);
	}

	/**
	 * Caches the sp domain in the entity cache if it is enabled.
	 *
	 * @param spDomain the sp domain
	 */
	@Override
	public void cacheResult(SpDomain spDomain) {
		EntityCacheUtil.putResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainImpl.class, spDomain.getPrimaryKey(), spDomain);

		FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_DOMAINCODE,
			new Object[] { spDomain.getSpDomainCode() }, spDomain);

		spDomain.resetOriginalValues();
	}

	/**
	 * Caches the sp domains in the entity cache if it is enabled.
	 *
	 * @param spDomains the sp domains
	 */
	@Override
	public void cacheResult(List<SpDomain> spDomains) {
		for (SpDomain spDomain : spDomains) {
			if (EntityCacheUtil.getResult(
						SpDomainModelImpl.ENTITY_CACHE_ENABLED,
						SpDomainImpl.class, spDomain.getPrimaryKey()) == null) {
				cacheResult(spDomain);
			}
			else {
				spDomain.resetOriginalValues();
			}
		}
	}

	/**
	 * Clears the cache for all sp domains.
	 *
	 * <p>
	 * The {@link com.liferay.portal.kernel.dao.orm.EntityCache} and {@link com.liferay.portal.kernel.dao.orm.FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache() {
		if (_HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE) {
			CacheRegistryUtil.clear(SpDomainImpl.class.getName());
		}

		EntityCacheUtil.clearCache(SpDomainImpl.class.getName());

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_ENTITY);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	/**
	 * Clears the cache for the sp domain.
	 *
	 * <p>
	 * The {@link com.liferay.portal.kernel.dao.orm.EntityCache} and {@link com.liferay.portal.kernel.dao.orm.FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache(SpDomain spDomain) {
		EntityCacheUtil.removeResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainImpl.class, spDomain.getPrimaryKey());

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		clearUniqueFindersCache(spDomain);
	}

	@Override
	public void clearCache(List<SpDomain> spDomains) {
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		for (SpDomain spDomain : spDomains) {
			EntityCacheUtil.removeResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
				SpDomainImpl.class, spDomain.getPrimaryKey());

			clearUniqueFindersCache(spDomain);
		}
	}

	protected void cacheUniqueFindersCache(SpDomain spDomain) {
		if (spDomain.isNew()) {
			Object[] args = new Object[] { spDomain.getSpDomainCode() };

			FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_DOMAINCODE, args,
				Long.valueOf(1));
			FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_DOMAINCODE, args,
				spDomain);
		}
		else {
			SpDomainModelImpl spDomainModelImpl = (SpDomainModelImpl)spDomain;

			if ((spDomainModelImpl.getColumnBitmask() &
					FINDER_PATH_FETCH_BY_DOMAINCODE.getColumnBitmask()) != 0) {
				Object[] args = new Object[] { spDomain.getSpDomainCode() };

				FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_DOMAINCODE,
					args, Long.valueOf(1));
				FinderCacheUtil.putResult(FINDER_PATH_FETCH_BY_DOMAINCODE,
					args, spDomain);
			}
		}
	}

	protected void clearUniqueFindersCache(SpDomain spDomain) {
		SpDomainModelImpl spDomainModelImpl = (SpDomainModelImpl)spDomain;

		Object[] args = new Object[] { spDomain.getSpDomainCode() };

		FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_DOMAINCODE, args);
		FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_DOMAINCODE, args);

		if ((spDomainModelImpl.getColumnBitmask() &
				FINDER_PATH_FETCH_BY_DOMAINCODE.getColumnBitmask()) != 0) {
			args = new Object[] { spDomainModelImpl.getOriginalSpDomainCode() };

			FinderCacheUtil.removeResult(FINDER_PATH_COUNT_BY_DOMAINCODE, args);
			FinderCacheUtil.removeResult(FINDER_PATH_FETCH_BY_DOMAINCODE, args);
		}
	}

	/**
	 * Creates a new sp domain with the primary key. Does not add the sp domain to the database.
	 *
	 * @param spDomainId the primary key for the new sp domain
	 * @return the new sp domain
	 */
	@Override
	public SpDomain create(long spDomainId) {
		SpDomain spDomain = new SpDomainImpl();

		spDomain.setNew(true);
		spDomain.setPrimaryKey(spDomainId);

		return spDomain;
	}

	/**
	 * Removes the sp domain with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param spDomainId the primary key of the sp domain
	 * @return the sp domain that was removed
	 * @throws science.platform.NoSuchSpDomainException if a sp domain with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain remove(long spDomainId)
		throws NoSuchSpDomainException, SystemException {
		return remove((Serializable)spDomainId);
	}

	/**
	 * Removes the sp domain with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primaryKey the primary key of the sp domain
	 * @return the sp domain that was removed
	 * @throws science.platform.NoSuchSpDomainException if a sp domain with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain remove(Serializable primaryKey)
		throws NoSuchSpDomainException, SystemException {
		Session session = null;

		try {
			session = openSession();

			SpDomain spDomain = (SpDomain)session.get(SpDomainImpl.class,
					primaryKey);

			if (spDomain == null) {
				if (_log.isWarnEnabled()) {
					_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchSpDomainException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(spDomain);
		}
		catch (NoSuchSpDomainException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	@Override
	protected SpDomain removeImpl(SpDomain spDomain) throws SystemException {
		spDomain = toUnwrappedModel(spDomain);

		Session session = null;

		try {
			session = openSession();

			if (!session.contains(spDomain)) {
				spDomain = (SpDomain)session.get(SpDomainImpl.class,
						spDomain.getPrimaryKeyObj());
			}

			if (spDomain != null) {
				session.delete(spDomain);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		if (spDomain != null) {
			clearCache(spDomain);
		}

		return spDomain;
	}

	@Override
	public SpDomain updateImpl(science.platform.model.SpDomain spDomain)
		throws SystemException {
		spDomain = toUnwrappedModel(spDomain);

		boolean isNew = spDomain.isNew();

		Session session = null;

		try {
			session = openSession();

			if (spDomain.isNew()) {
				session.save(spDomain);

				spDomain.setNew(false);
			}
			else {
				session.merge(spDomain);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);

		if (isNew || !SpDomainModelImpl.COLUMN_BITMASK_ENABLED) {
			FinderCacheUtil.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
		}

		EntityCacheUtil.putResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
			SpDomainImpl.class, spDomain.getPrimaryKey(), spDomain);

		clearUniqueFindersCache(spDomain);
		cacheUniqueFindersCache(spDomain);

		return spDomain;
	}

	protected SpDomain toUnwrappedModel(SpDomain spDomain) {
		if (spDomain instanceof SpDomainImpl) {
			return spDomain;
		}

		SpDomainImpl spDomainImpl = new SpDomainImpl();

		spDomainImpl.setNew(spDomain.isNew());
		spDomainImpl.setPrimaryKey(spDomain.getPrimaryKey());

		spDomainImpl.setSpDomainId(spDomain.getSpDomainId());
		spDomainImpl.setSpDomainCode(spDomain.getSpDomainCode());
		spDomainImpl.setSpDomainName(spDomain.getSpDomainName());
		spDomainImpl.setSpActive(spDomain.isSpActive());

		return spDomainImpl;
	}

	/**
	 * Returns the sp domain with the primary key or throws a {@link com.liferay.portal.NoSuchModelException} if it could not be found.
	 *
	 * @param primaryKey the primary key of the sp domain
	 * @return the sp domain
	 * @throws science.platform.NoSuchSpDomainException if a sp domain with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain findByPrimaryKey(Serializable primaryKey)
		throws NoSuchSpDomainException, SystemException {
		SpDomain spDomain = fetchByPrimaryKey(primaryKey);

		if (spDomain == null) {
			if (_log.isWarnEnabled()) {
				_log.warn(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
			}

			throw new NoSuchSpDomainException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				primaryKey);
		}

		return spDomain;
	}

	/**
	 * Returns the sp domain with the primary key or throws a {@link science.platform.NoSuchSpDomainException} if it could not be found.
	 *
	 * @param spDomainId the primary key of the sp domain
	 * @return the sp domain
	 * @throws science.platform.NoSuchSpDomainException if a sp domain with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain findByPrimaryKey(long spDomainId)
		throws NoSuchSpDomainException, SystemException {
		return findByPrimaryKey((Serializable)spDomainId);
	}

	/**
	 * Returns the sp domain with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param primaryKey the primary key of the sp domain
	 * @return the sp domain, or <code>null</code> if a sp domain with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain fetchByPrimaryKey(Serializable primaryKey)
		throws SystemException {
		SpDomain spDomain = (SpDomain)EntityCacheUtil.getResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
				SpDomainImpl.class, primaryKey);

		if (spDomain == _nullSpDomain) {
			return null;
		}

		if (spDomain == null) {
			Session session = null;

			try {
				session = openSession();

				spDomain = (SpDomain)session.get(SpDomainImpl.class, primaryKey);

				if (spDomain != null) {
					cacheResult(spDomain);
				}
				else {
					EntityCacheUtil.putResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
						SpDomainImpl.class, primaryKey, _nullSpDomain);
				}
			}
			catch (Exception e) {
				EntityCacheUtil.removeResult(SpDomainModelImpl.ENTITY_CACHE_ENABLED,
					SpDomainImpl.class, primaryKey);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return spDomain;
	}

	/**
	 * Returns the sp domain with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param spDomainId the primary key of the sp domain
	 * @return the sp domain, or <code>null</code> if a sp domain with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SpDomain fetchByPrimaryKey(long spDomainId)
		throws SystemException {
		return fetchByPrimaryKey((Serializable)spDomainId);
	}

	/**
	 * Returns all the sp domains.
	 *
	 * @return the sp domains
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SpDomain> findAll() throws SystemException {
		return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}

	/**
	 * Returns a range of all the sp domains.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link science.platform.model.impl.SpDomainModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of sp domains
	 * @param end the upper bound of the range of sp domains (not inclusive)
	 * @return the range of sp domains
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SpDomain> findAll(int start, int end) throws SystemException {
		return findAll(start, end, null);
	}

	/**
	 * Returns an ordered range of all the sp domains.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link science.platform.model.impl.SpDomainModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of sp domains
	 * @param end the upper bound of the range of sp domains (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of sp domains
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SpDomain> findAll(int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;
			finderArgs = FINDER_ARGS_EMPTY;
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;
			finderArgs = new Object[] { start, end, orderByComparator };
		}

		List<SpDomain> list = (List<SpDomain>)FinderCacheUtil.getResult(finderPath,
				finderArgs, this);

		if (list == null) {
			StringBundler query = null;
			String sql = null;

			if (orderByComparator != null) {
				query = new StringBundler(2 +
						(orderByComparator.getOrderByFields().length * 3));

				query.append(_SQL_SELECT_SPDOMAIN);

				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);

				sql = query.toString();
			}
			else {
				sql = _SQL_SELECT_SPDOMAIN;

				if (pagination) {
					sql = sql.concat(SpDomainModelImpl.ORDER_BY_JPQL);
				}
			}

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				if (!pagination) {
					list = (List<SpDomain>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);

					list = new UnmodifiableList<SpDomain>(list);
				}
				else {
					list = (List<SpDomain>)QueryUtil.list(q, getDialect(),
							start, end);
				}

				cacheResult(list);

				FinderCacheUtil.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Removes all the sp domains from the database.
	 *
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public void removeAll() throws SystemException {
		for (SpDomain spDomain : findAll()) {
			remove(spDomain);
		}
	}

	/**
	 * Returns the number of sp domains.
	 *
	 * @return the number of sp domains
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int countAll() throws SystemException {
		Long count = (Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_ALL,
				FINDER_ARGS_EMPTY, this);

		if (count == null) {
			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(_SQL_COUNT_SPDOMAIN);

				count = (Long)q.uniqueResult();

				FinderCacheUtil.putResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY, count);
			}
			catch (Exception e) {
				FinderCacheUtil.removeResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	/**
	 * Initializes the sp domain persistence.
	 */
	public void afterPropertiesSet() {
		String[] listenerClassNames = StringUtil.split(GetterUtil.getString(
					com.liferay.util.service.ServiceProps.get(
						"value.object.listener.science.platform.model.SpDomain")));

		if (listenerClassNames.length > 0) {
			try {
				List<ModelListener<SpDomain>> listenersList = new ArrayList<ModelListener<SpDomain>>();

				for (String listenerClassName : listenerClassNames) {
					listenersList.add((ModelListener<SpDomain>)InstanceFactory.newInstance(
							getClassLoader(), listenerClassName));
				}

				listeners = listenersList.toArray(new ModelListener[listenersList.size()]);
			}
			catch (Exception e) {
				_log.error(e);
			}
		}
	}

	public void destroy() {
		EntityCacheUtil.removeCache(SpDomainImpl.class.getName());
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_ENTITY);
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		FinderCacheUtil.removeCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	private static final String _SQL_SELECT_SPDOMAIN = "SELECT spDomain FROM SpDomain spDomain";
	private static final String _SQL_SELECT_SPDOMAIN_WHERE = "SELECT spDomain FROM SpDomain spDomain WHERE ";
	private static final String _SQL_COUNT_SPDOMAIN = "SELECT COUNT(spDomain) FROM SpDomain spDomain";
	private static final String _SQL_COUNT_SPDOMAIN_WHERE = "SELECT COUNT(spDomain) FROM SpDomain spDomain WHERE ";
	private static final String _ORDER_BY_ENTITY_ALIAS = "spDomain.";
	private static final String _NO_SUCH_ENTITY_WITH_PRIMARY_KEY = "No SpDomain exists with the primary key ";
	private static final String _NO_SUCH_ENTITY_WITH_KEY = "No SpDomain exists with the key {";
	private static final boolean _HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE = GetterUtil.getBoolean(PropsUtil.get(
				PropsKeys.HIBERNATE_CACHE_USE_SECOND_LEVEL_CACHE));
	private static Log _log = LogFactoryUtil.getLog(SpDomainPersistenceImpl.class);
	private static SpDomain _nullSpDomain = new SpDomainImpl() {
			@Override
			public Object clone() {
				return this;
			}

			@Override
			public CacheModel<SpDomain> toCacheModel() {
				return _nullSpDomainCacheModel;
			}
		};

	private static CacheModel<SpDomain> _nullSpDomainCacheModel = new CacheModel<SpDomain>() {
			@Override
			public SpDomain toEntityModel() {
				return _nullSpDomain;
			}
		};
}