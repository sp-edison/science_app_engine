/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;

import science.platform.model.SpUser;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

/**
 * The cache model class for representing SpUser in entity cache.
 *
 * @author Jerry h. Seo
 * @see SpUser
 * @generated
 */
public class SpUserCacheModel implements CacheModel<SpUser>, Externalizable {
	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{spUserId=");
		sb.append(spUserId);
		sb.append(", spCountryId=");
		sb.append(spCountryId);
		sb.append(", spRegionId=");
		sb.append(spRegionId);
		sb.append(", spAffiliationId=");
		sb.append(spAffiliationId);
		sb.append(", spUserFullName=");
		sb.append(spUserFullName);
		sb.append("}");

		return sb.toString();
	}

	@Override
	public SpUser toEntityModel() {
		SpUserImpl spUserImpl = new SpUserImpl();

		spUserImpl.setSpUserId(spUserId);
		spUserImpl.setSpCountryId(spCountryId);
		spUserImpl.setSpRegionId(spRegionId);
		spUserImpl.setSpAffiliationId(spAffiliationId);

		if (spUserFullName == null) {
			spUserImpl.setSpUserFullName(StringPool.BLANK);
		}
		else {
			spUserImpl.setSpUserFullName(spUserFullName);
		}

		spUserImpl.resetOriginalValues();

		return spUserImpl;
	}

	@Override
	public void readExternal(ObjectInput objectInput) throws IOException {
		spUserId = objectInput.readLong();
		spCountryId = objectInput.readLong();
		spRegionId = objectInput.readLong();
		spAffiliationId = objectInput.readLong();
		spUserFullName = objectInput.readUTF();
	}

	@Override
	public void writeExternal(ObjectOutput objectOutput)
		throws IOException {
		objectOutput.writeLong(spUserId);
		objectOutput.writeLong(spCountryId);
		objectOutput.writeLong(spRegionId);
		objectOutput.writeLong(spAffiliationId);

		if (spUserFullName == null) {
			objectOutput.writeUTF(StringPool.BLANK);
		}
		else {
			objectOutput.writeUTF(spUserFullName);
		}
	}

	public long spUserId;
	public long spCountryId;
	public long spRegionId;
	public long spAffiliationId;
	public String spUserFullName;
}