/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;

import science.platform.model.SpUserDomain;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

/**
 * The cache model class for representing SpUserDomain in entity cache.
 *
 * @author Jerry h. Seo
 * @see SpUserDomain
 * @generated
 */
public class SpUserDomainCacheModel implements CacheModel<SpUserDomain>,
	Externalizable {
	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{spUserDomainId=");
		sb.append(spUserDomainId);
		sb.append(", spDomainId=");
		sb.append(spDomainId);
		sb.append(", spUserId=");
		sb.append(spUserId);
		sb.append(", apActive=");
		sb.append(apActive);
		sb.append("}");

		return sb.toString();
	}

	@Override
	public SpUserDomain toEntityModel() {
		SpUserDomainImpl spUserDomainImpl = new SpUserDomainImpl();

		spUserDomainImpl.setSpUserDomainId(spUserDomainId);
		spUserDomainImpl.setSpDomainId(spDomainId);
		spUserDomainImpl.setSpUserId(spUserId);
		spUserDomainImpl.setApActive(apActive);

		spUserDomainImpl.resetOriginalValues();

		return spUserDomainImpl;
	}

	@Override
	public void readExternal(ObjectInput objectInput) throws IOException {
		spUserDomainId = objectInput.readLong();
		spDomainId = objectInput.readLong();
		spUserId = objectInput.readLong();
		apActive = objectInput.readBoolean();
	}

	@Override
	public void writeExternal(ObjectOutput objectOutput)
		throws IOException {
		objectOutput.writeLong(spUserDomainId);
		objectOutput.writeLong(spDomainId);
		objectOutput.writeLong(spUserId);
		objectOutput.writeBoolean(apActive);
	}

	public long spUserDomainId;
	public long spDomainId;
	public long spUserId;
	public boolean apActive;
}