/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import science.platform.model.SpAffiliation;
import science.platform.model.SpAffiliationModel;
import science.platform.model.SpAffiliationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SpAffiliation service. Represents a row in the &quot;SciencePlatformHook_SpAffiliation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link science.platform.model.SpAffiliationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpAffiliationImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpAffiliationImpl
 * @see science.platform.model.SpAffiliation
 * @see science.platform.model.SpAffiliationModel
 * @generated
 */
@JSON(strict = true)
public class SpAffiliationModelImpl extends BaseModelImpl<SpAffiliation>
	implements SpAffiliationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sp affiliation model instance should use the {@link science.platform.model.SpAffiliation} interface instead.
	 */
	public static final String TABLE_NAME = "SciencePlatformHook_SpAffiliation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spAffiliationId", Types.BIGINT },
			{ "spRegionId", Types.BIGINT },
			{ "spCountryId", Types.BIGINT },
			{ "spAffiliationCode", Types.VARCHAR },
			{ "spAffiliationName", Types.VARCHAR },
			{ "spActive", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SciencePlatformHook_SpAffiliation (spAffiliationId LONG not null primary key,spRegionId LONG,spCountryId LONG,spAffiliationCode VARCHAR(75) null,spAffiliationName STRING null,spActive BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SciencePlatformHook_SpAffiliation";
	public static final String ORDER_BY_JPQL = " ORDER BY spAffiliation.spAffiliationName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SciencePlatformHook_SpAffiliation.spAffiliationName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.science.platform.model.SpAffiliation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.science.platform.model.SpAffiliation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.science.platform.model.SpAffiliation"),
			true);
	public static long SPAFFILIATIONCODE_COLUMN_BITMASK = 1L;
	public static long SPCOUNTRYID_COLUMN_BITMASK = 2L;
	public static long SPREGIONID_COLUMN_BITMASK = 4L;
	public static long SPAFFILIATIONNAME_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SpAffiliation toModel(SpAffiliationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SpAffiliation model = new SpAffiliationImpl();

		model.setSpAffiliationId(soapModel.getSpAffiliationId());
		model.setSpRegionId(soapModel.getSpRegionId());
		model.setSpCountryId(soapModel.getSpCountryId());
		model.setSpAffiliationCode(soapModel.getSpAffiliationCode());
		model.setSpAffiliationName(soapModel.getSpAffiliationName());
		model.setSpActive(soapModel.getSpActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SpAffiliation> toModels(SpAffiliationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SpAffiliation> models = new ArrayList<SpAffiliation>(soapModels.length);

		for (SpAffiliationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.science.platform.model.SpAffiliation"));

	public SpAffiliationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spAffiliationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpAffiliationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spAffiliationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpAffiliation.class;
	}

	@Override
	public String getModelClassName() {
		return SpAffiliation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spAffiliationId", getSpAffiliationId());
		attributes.put("spRegionId", getSpRegionId());
		attributes.put("spCountryId", getSpCountryId());
		attributes.put("spAffiliationCode", getSpAffiliationCode());
		attributes.put("spAffiliationName", getSpAffiliationName());
		attributes.put("spActive", getSpActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spAffiliationId = (Long)attributes.get("spAffiliationId");

		if (spAffiliationId != null) {
			setSpAffiliationId(spAffiliationId);
		}

		Long spRegionId = (Long)attributes.get("spRegionId");

		if (spRegionId != null) {
			setSpRegionId(spRegionId);
		}

		Long spCountryId = (Long)attributes.get("spCountryId");

		if (spCountryId != null) {
			setSpCountryId(spCountryId);
		}

		String spAffiliationCode = (String)attributes.get("spAffiliationCode");

		if (spAffiliationCode != null) {
			setSpAffiliationCode(spAffiliationCode);
		}

		String spAffiliationName = (String)attributes.get("spAffiliationName");

		if (spAffiliationName != null) {
			setSpAffiliationName(spAffiliationName);
		}

		Boolean spActive = (Boolean)attributes.get("spActive");

		if (spActive != null) {
			setSpActive(spActive);
		}
	}

	@JSON
	@Override
	public long getSpAffiliationId() {
		return _spAffiliationId;
	}

	@Override
	public void setSpAffiliationId(long spAffiliationId) {
		_spAffiliationId = spAffiliationId;
	}

	@JSON
	@Override
	public long getSpRegionId() {
		return _spRegionId;
	}

	@Override
	public void setSpRegionId(long spRegionId) {
		_columnBitmask |= SPREGIONID_COLUMN_BITMASK;

		if (!_setOriginalSpRegionId) {
			_setOriginalSpRegionId = true;

			_originalSpRegionId = _spRegionId;
		}

		_spRegionId = spRegionId;
	}

	public long getOriginalSpRegionId() {
		return _originalSpRegionId;
	}

	@JSON
	@Override
	public long getSpCountryId() {
		return _spCountryId;
	}

	@Override
	public void setSpCountryId(long spCountryId) {
		_columnBitmask |= SPCOUNTRYID_COLUMN_BITMASK;

		if (!_setOriginalSpCountryId) {
			_setOriginalSpCountryId = true;

			_originalSpCountryId = _spCountryId;
		}

		_spCountryId = spCountryId;
	}

	public long getOriginalSpCountryId() {
		return _originalSpCountryId;
	}

	@JSON
	@Override
	public String getSpAffiliationCode() {
		if (_spAffiliationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAffiliationCode;
		}
	}

	@Override
	public void setSpAffiliationCode(String spAffiliationCode) {
		_columnBitmask |= SPAFFILIATIONCODE_COLUMN_BITMASK;

		if (_originalSpAffiliationCode == null) {
			_originalSpAffiliationCode = _spAffiliationCode;
		}

		_spAffiliationCode = spAffiliationCode;
	}

	public String getOriginalSpAffiliationCode() {
		return GetterUtil.getString(_originalSpAffiliationCode);
	}

	@JSON
	@Override
	public String getSpAffiliationName() {
		if (_spAffiliationName == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAffiliationName;
		}
	}

	@Override
	public String getSpAffiliationName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpAffiliationName(languageId);
	}

	@Override
	public String getSpAffiliationName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpAffiliationName(languageId, useDefault);
	}

	@Override
	public String getSpAffiliationName(String languageId) {
		return LocalizationUtil.getLocalization(getSpAffiliationName(),
			languageId);
	}

	@Override
	public String getSpAffiliationName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSpAffiliationName(),
			languageId, useDefault);
	}

	@Override
	public String getSpAffiliationNameCurrentLanguageId() {
		return _spAffiliationNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSpAffiliationNameCurrentValue() {
		Locale locale = getLocale(_spAffiliationNameCurrentLanguageId);

		return getSpAffiliationName(locale);
	}

	@Override
	public Map<Locale, String> getSpAffiliationNameMap() {
		return LocalizationUtil.getLocalizationMap(getSpAffiliationName());
	}

	@Override
	public void setSpAffiliationName(String spAffiliationName) {
		_columnBitmask = -1L;

		_spAffiliationName = spAffiliationName;
	}

	@Override
	public void setSpAffiliationName(String spAffiliationName, Locale locale) {
		setSpAffiliationName(spAffiliationName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSpAffiliationName(String spAffiliationName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(spAffiliationName)) {
			setSpAffiliationName(LocalizationUtil.updateLocalization(
					getSpAffiliationName(), "SpAffiliationName",
					spAffiliationName, languageId, defaultLanguageId));
		}
		else {
			setSpAffiliationName(LocalizationUtil.removeLocalization(
					getSpAffiliationName(), "SpAffiliationName", languageId));
		}
	}

	@Override
	public void setSpAffiliationNameCurrentLanguageId(String languageId) {
		_spAffiliationNameCurrentLanguageId = languageId;
	}

	@Override
	public void setSpAffiliationNameMap(
		Map<Locale, String> spAffiliationNameMap) {
		setSpAffiliationNameMap(spAffiliationNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSpAffiliationNameMap(
		Map<Locale, String> spAffiliationNameMap, Locale defaultLocale) {
		if (spAffiliationNameMap == null) {
			return;
		}

		setSpAffiliationName(LocalizationUtil.updateLocalization(
				spAffiliationNameMap, getSpAffiliationName(),
				"SpAffiliationName", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getSpActive() {
		return _spActive;
	}

	@Override
	public boolean isSpActive() {
		return _spActive;
	}

	@Override
	public void setSpActive(boolean spActive) {
		_spActive = spActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpAffiliation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> spAffiliationNameMap = getSpAffiliationNameMap();

		for (Map.Entry<Locale, String> entry : spAffiliationNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSpAffiliationName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String spAffiliationName = getSpAffiliationName(defaultLocale);

		if (Validator.isNull(spAffiliationName)) {
			setSpAffiliationName(getSpAffiliationName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setSpAffiliationName(getSpAffiliationName(defaultLocale),
				defaultLocale, defaultLocale);
		}
	}

	@Override
	public SpAffiliation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpAffiliation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpAffiliationImpl spAffiliationImpl = new SpAffiliationImpl();

		spAffiliationImpl.setSpAffiliationId(getSpAffiliationId());
		spAffiliationImpl.setSpRegionId(getSpRegionId());
		spAffiliationImpl.setSpCountryId(getSpCountryId());
		spAffiliationImpl.setSpAffiliationCode(getSpAffiliationCode());
		spAffiliationImpl.setSpAffiliationName(getSpAffiliationName());
		spAffiliationImpl.setSpActive(getSpActive());

		spAffiliationImpl.resetOriginalValues();

		return spAffiliationImpl;
	}

	@Override
	public int compareTo(SpAffiliation spAffiliation) {
		int value = 0;

		value = getSpAffiliationName()
					.compareTo(spAffiliation.getSpAffiliationName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpAffiliation)) {
			return false;
		}

		SpAffiliation spAffiliation = (SpAffiliation)obj;

		long primaryKey = spAffiliation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SpAffiliationModelImpl spAffiliationModelImpl = this;

		spAffiliationModelImpl._originalSpRegionId = spAffiliationModelImpl._spRegionId;

		spAffiliationModelImpl._setOriginalSpRegionId = false;

		spAffiliationModelImpl._originalSpCountryId = spAffiliationModelImpl._spCountryId;

		spAffiliationModelImpl._setOriginalSpCountryId = false;

		spAffiliationModelImpl._originalSpAffiliationCode = spAffiliationModelImpl._spAffiliationCode;

		spAffiliationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpAffiliation> toCacheModel() {
		SpAffiliationCacheModel spAffiliationCacheModel = new SpAffiliationCacheModel();

		spAffiliationCacheModel.spAffiliationId = getSpAffiliationId();

		spAffiliationCacheModel.spRegionId = getSpRegionId();

		spAffiliationCacheModel.spCountryId = getSpCountryId();

		spAffiliationCacheModel.spAffiliationCode = getSpAffiliationCode();

		String spAffiliationCode = spAffiliationCacheModel.spAffiliationCode;

		if ((spAffiliationCode != null) && (spAffiliationCode.length() == 0)) {
			spAffiliationCacheModel.spAffiliationCode = null;
		}

		spAffiliationCacheModel.spAffiliationName = getSpAffiliationName();

		String spAffiliationName = spAffiliationCacheModel.spAffiliationName;

		if ((spAffiliationName != null) && (spAffiliationName.length() == 0)) {
			spAffiliationCacheModel.spAffiliationName = null;
		}

		spAffiliationCacheModel.spActive = getSpActive();

		return spAffiliationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{spAffiliationId=");
		sb.append(getSpAffiliationId());
		sb.append(", spRegionId=");
		sb.append(getSpRegionId());
		sb.append(", spCountryId=");
		sb.append(getSpCountryId());
		sb.append(", spAffiliationCode=");
		sb.append(getSpAffiliationCode());
		sb.append(", spAffiliationName=");
		sb.append(getSpAffiliationName());
		sb.append(", spActive=");
		sb.append(getSpActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("science.platform.model.SpAffiliation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spAffiliationId</column-name><column-value><![CDATA[");
		sb.append(getSpAffiliationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spRegionId</column-name><column-value><![CDATA[");
		sb.append(getSpRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCountryId</column-name><column-value><![CDATA[");
		sb.append(getSpCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAffiliationCode</column-name><column-value><![CDATA[");
		sb.append(getSpAffiliationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAffiliationName</column-name><column-value><![CDATA[");
		sb.append(getSpAffiliationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spActive</column-name><column-value><![CDATA[");
		sb.append(getSpActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpAffiliation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SpAffiliation.class
		};
	private long _spAffiliationId;
	private long _spRegionId;
	private long _originalSpRegionId;
	private boolean _setOriginalSpRegionId;
	private long _spCountryId;
	private long _originalSpCountryId;
	private boolean _setOriginalSpCountryId;
	private String _spAffiliationCode;
	private String _originalSpAffiliationCode;
	private String _spAffiliationName;
	private String _spAffiliationNameCurrentLanguageId;
	private boolean _spActive;
	private long _columnBitmask;
	private SpAffiliation _escapedModel;
}