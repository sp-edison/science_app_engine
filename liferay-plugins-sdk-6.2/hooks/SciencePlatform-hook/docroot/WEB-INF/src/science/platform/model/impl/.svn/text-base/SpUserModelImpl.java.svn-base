/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import science.platform.model.SpUser;
import science.platform.model.SpUserModel;
import science.platform.model.SpUserSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SpUser service. Represents a row in the &quot;SciencePlatformHook_SpUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link science.platform.model.SpUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpUserImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpUserImpl
 * @see science.platform.model.SpUser
 * @see science.platform.model.SpUserModel
 * @generated
 */
@JSON(strict = true)
public class SpUserModelImpl extends BaseModelImpl<SpUser>
	implements SpUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sp user model instance should use the {@link science.platform.model.SpUser} interface instead.
	 */
	public static final String TABLE_NAME = "SciencePlatformHook_SpUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spUserId", Types.BIGINT },
			{ "spCountryId", Types.BIGINT },
			{ "spRegionId", Types.BIGINT },
			{ "spAffiliationId", Types.BIGINT },
			{ "spUserFullName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SciencePlatformHook_SpUser (spUserId LONG not null primary key,spCountryId LONG,spRegionId LONG,spAffiliationId LONG,spUserFullName STRING null)";
	public static final String TABLE_SQL_DROP = "drop table SciencePlatformHook_SpUser";
	public static final String ORDER_BY_JPQL = " ORDER BY spUser.spUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SciencePlatformHook_SpUser.spUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.science.platform.model.SpUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.science.platform.model.SpUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SpUser toModel(SpUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SpUser model = new SpUserImpl();

		model.setSpUserId(soapModel.getSpUserId());
		model.setSpCountryId(soapModel.getSpCountryId());
		model.setSpRegionId(soapModel.getSpRegionId());
		model.setSpAffiliationId(soapModel.getSpAffiliationId());
		model.setSpUserFullName(soapModel.getSpUserFullName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SpUser> toModels(SpUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SpUser> models = new ArrayList<SpUser>(soapModels.length);

		for (SpUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.science.platform.model.SpUser"));

	public SpUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpUser.class;
	}

	@Override
	public String getModelClassName() {
		return SpUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spUserId", getSpUserId());
		attributes.put("spCountryId", getSpCountryId());
		attributes.put("spRegionId", getSpRegionId());
		attributes.put("spAffiliationId", getSpAffiliationId());
		attributes.put("spUserFullName", getSpUserFullName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spUserId = (Long)attributes.get("spUserId");

		if (spUserId != null) {
			setSpUserId(spUserId);
		}

		Long spCountryId = (Long)attributes.get("spCountryId");

		if (spCountryId != null) {
			setSpCountryId(spCountryId);
		}

		Long spRegionId = (Long)attributes.get("spRegionId");

		if (spRegionId != null) {
			setSpRegionId(spRegionId);
		}

		Long spAffiliationId = (Long)attributes.get("spAffiliationId");

		if (spAffiliationId != null) {
			setSpAffiliationId(spAffiliationId);
		}

		String spUserFullName = (String)attributes.get("spUserFullName");

		if (spUserFullName != null) {
			setSpUserFullName(spUserFullName);
		}
	}

	@JSON
	@Override
	public long getSpUserId() {
		return _spUserId;
	}

	@Override
	public void setSpUserId(long spUserId) {
		_spUserId = spUserId;
	}

	@Override
	public String getSpUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getSpUserId(), "uuid", _spUserUuid);
	}

	@Override
	public void setSpUserUuid(String spUserUuid) {
		_spUserUuid = spUserUuid;
	}

	@JSON
	@Override
	public long getSpCountryId() {
		return _spCountryId;
	}

	@Override
	public void setSpCountryId(long spCountryId) {
		_spCountryId = spCountryId;
	}

	@JSON
	@Override
	public long getSpRegionId() {
		return _spRegionId;
	}

	@Override
	public void setSpRegionId(long spRegionId) {
		_spRegionId = spRegionId;
	}

	@JSON
	@Override
	public long getSpAffiliationId() {
		return _spAffiliationId;
	}

	@Override
	public void setSpAffiliationId(long spAffiliationId) {
		_spAffiliationId = spAffiliationId;
	}

	@JSON
	@Override
	public String getSpUserFullName() {
		if (_spUserFullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _spUserFullName;
		}
	}

	@Override
	public String getSpUserFullName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpUserFullName(languageId);
	}

	@Override
	public String getSpUserFullName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpUserFullName(languageId, useDefault);
	}

	@Override
	public String getSpUserFullName(String languageId) {
		return LocalizationUtil.getLocalization(getSpUserFullName(), languageId);
	}

	@Override
	public String getSpUserFullName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSpUserFullName(),
			languageId, useDefault);
	}

	@Override
	public String getSpUserFullNameCurrentLanguageId() {
		return _spUserFullNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSpUserFullNameCurrentValue() {
		Locale locale = getLocale(_spUserFullNameCurrentLanguageId);

		return getSpUserFullName(locale);
	}

	@Override
	public Map<Locale, String> getSpUserFullNameMap() {
		return LocalizationUtil.getLocalizationMap(getSpUserFullName());
	}

	@Override
	public void setSpUserFullName(String spUserFullName) {
		_spUserFullName = spUserFullName;
	}

	@Override
	public void setSpUserFullName(String spUserFullName, Locale locale) {
		setSpUserFullName(spUserFullName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSpUserFullName(String spUserFullName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(spUserFullName)) {
			setSpUserFullName(LocalizationUtil.updateLocalization(
					getSpUserFullName(), "SpUserFullName", spUserFullName,
					languageId, defaultLanguageId));
		}
		else {
			setSpUserFullName(LocalizationUtil.removeLocalization(
					getSpUserFullName(), "SpUserFullName", languageId));
		}
	}

	@Override
	public void setSpUserFullNameCurrentLanguageId(String languageId) {
		_spUserFullNameCurrentLanguageId = languageId;
	}

	@Override
	public void setSpUserFullNameMap(Map<Locale, String> spUserFullNameMap) {
		setSpUserFullNameMap(spUserFullNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSpUserFullNameMap(Map<Locale, String> spUserFullNameMap,
		Locale defaultLocale) {
		if (spUserFullNameMap == null) {
			return;
		}

		setSpUserFullName(LocalizationUtil.updateLocalization(
				spUserFullNameMap, getSpUserFullName(), "SpUserFullName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> spUserFullNameMap = getSpUserFullNameMap();

		for (Map.Entry<Locale, String> entry : spUserFullNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSpUserFullName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String spUserFullName = getSpUserFullName(defaultLocale);

		if (Validator.isNull(spUserFullName)) {
			setSpUserFullName(getSpUserFullName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setSpUserFullName(getSpUserFullName(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public SpUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpUserImpl spUserImpl = new SpUserImpl();

		spUserImpl.setSpUserId(getSpUserId());
		spUserImpl.setSpCountryId(getSpCountryId());
		spUserImpl.setSpRegionId(getSpRegionId());
		spUserImpl.setSpAffiliationId(getSpAffiliationId());
		spUserImpl.setSpUserFullName(getSpUserFullName());

		spUserImpl.resetOriginalValues();

		return spUserImpl;
	}

	@Override
	public int compareTo(SpUser spUser) {
		long primaryKey = spUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpUser)) {
			return false;
		}

		SpUser spUser = (SpUser)obj;

		long primaryKey = spUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SpUser> toCacheModel() {
		SpUserCacheModel spUserCacheModel = new SpUserCacheModel();

		spUserCacheModel.spUserId = getSpUserId();

		spUserCacheModel.spCountryId = getSpCountryId();

		spUserCacheModel.spRegionId = getSpRegionId();

		spUserCacheModel.spAffiliationId = getSpAffiliationId();

		spUserCacheModel.spUserFullName = getSpUserFullName();

		String spUserFullName = spUserCacheModel.spUserFullName;

		if ((spUserFullName != null) && (spUserFullName.length() == 0)) {
			spUserCacheModel.spUserFullName = null;
		}

		return spUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{spUserId=");
		sb.append(getSpUserId());
		sb.append(", spCountryId=");
		sb.append(getSpCountryId());
		sb.append(", spRegionId=");
		sb.append(getSpRegionId());
		sb.append(", spAffiliationId=");
		sb.append(getSpAffiliationId());
		sb.append(", spUserFullName=");
		sb.append(getSpUserFullName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("science.platform.model.SpUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spUserId</column-name><column-value><![CDATA[");
		sb.append(getSpUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCountryId</column-name><column-value><![CDATA[");
		sb.append(getSpCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spRegionId</column-name><column-value><![CDATA[");
		sb.append(getSpRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAffiliationId</column-name><column-value><![CDATA[");
		sb.append(getSpAffiliationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spUserFullName</column-name><column-value><![CDATA[");
		sb.append(getSpUserFullName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { SpUser.class };
	private long _spUserId;
	private String _spUserUuid;
	private long _spCountryId;
	private long _spRegionId;
	private long _spAffiliationId;
	private String _spUserFullName;
	private String _spUserFullNameCurrentLanguageId;
	private SpUser _escapedModel;
}