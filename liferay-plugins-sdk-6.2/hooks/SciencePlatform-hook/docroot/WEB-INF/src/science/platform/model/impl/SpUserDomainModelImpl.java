/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import science.platform.model.SpUserDomain;
import science.platform.model.SpUserDomainModel;
import science.platform.model.SpUserDomainSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SpUserDomain service. Represents a row in the &quot;SciencePlatformHook_SpUserDomain&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link science.platform.model.SpUserDomainModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpUserDomainImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpUserDomainImpl
 * @see science.platform.model.SpUserDomain
 * @see science.platform.model.SpUserDomainModel
 * @generated
 */
@JSON(strict = true)
public class SpUserDomainModelImpl extends BaseModelImpl<SpUserDomain>
	implements SpUserDomainModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sp user domain model instance should use the {@link science.platform.model.SpUserDomain} interface instead.
	 */
	public static final String TABLE_NAME = "SciencePlatformHook_SpUserDomain";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spUserDomainId", Types.BIGINT },
			{ "spDomainId", Types.BIGINT },
			{ "spUserId", Types.BIGINT },
			{ "apActive", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SciencePlatformHook_SpUserDomain (spUserDomainId LONG not null primary key,spDomainId LONG,spUserId LONG,apActive BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SciencePlatformHook_SpUserDomain";
	public static final String ORDER_BY_JPQL = " ORDER BY spUserDomain.spUserDomainId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SciencePlatformHook_SpUserDomain.spUserDomainId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.science.platform.model.SpUserDomain"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.science.platform.model.SpUserDomain"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.science.platform.model.SpUserDomain"),
			true);
	public static long SPDOMAINID_COLUMN_BITMASK = 1L;
	public static long SPUSERID_COLUMN_BITMASK = 2L;
	public static long SPUSERDOMAINID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SpUserDomain toModel(SpUserDomainSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SpUserDomain model = new SpUserDomainImpl();

		model.setSpUserDomainId(soapModel.getSpUserDomainId());
		model.setSpDomainId(soapModel.getSpDomainId());
		model.setSpUserId(soapModel.getSpUserId());
		model.setApActive(soapModel.getApActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SpUserDomain> toModels(SpUserDomainSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SpUserDomain> models = new ArrayList<SpUserDomain>(soapModels.length);

		for (SpUserDomainSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.science.platform.model.SpUserDomain"));

	public SpUserDomainModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spUserDomainId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpUserDomainId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spUserDomainId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpUserDomain.class;
	}

	@Override
	public String getModelClassName() {
		return SpUserDomain.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spUserDomainId", getSpUserDomainId());
		attributes.put("spDomainId", getSpDomainId());
		attributes.put("spUserId", getSpUserId());
		attributes.put("apActive", getApActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spUserDomainId = (Long)attributes.get("spUserDomainId");

		if (spUserDomainId != null) {
			setSpUserDomainId(spUserDomainId);
		}

		Long spDomainId = (Long)attributes.get("spDomainId");

		if (spDomainId != null) {
			setSpDomainId(spDomainId);
		}

		Long spUserId = (Long)attributes.get("spUserId");

		if (spUserId != null) {
			setSpUserId(spUserId);
		}

		Boolean apActive = (Boolean)attributes.get("apActive");

		if (apActive != null) {
			setApActive(apActive);
		}
	}

	@JSON
	@Override
	public long getSpUserDomainId() {
		return _spUserDomainId;
	}

	@Override
	public void setSpUserDomainId(long spUserDomainId) {
		_spUserDomainId = spUserDomainId;
	}

	@JSON
	@Override
	public long getSpDomainId() {
		return _spDomainId;
	}

	@Override
	public void setSpDomainId(long spDomainId) {
		_columnBitmask |= SPDOMAINID_COLUMN_BITMASK;

		if (!_setOriginalSpDomainId) {
			_setOriginalSpDomainId = true;

			_originalSpDomainId = _spDomainId;
		}

		_spDomainId = spDomainId;
	}

	public long getOriginalSpDomainId() {
		return _originalSpDomainId;
	}

	@JSON
	@Override
	public long getSpUserId() {
		return _spUserId;
	}

	@Override
	public void setSpUserId(long spUserId) {
		_columnBitmask |= SPUSERID_COLUMN_BITMASK;

		if (!_setOriginalSpUserId) {
			_setOriginalSpUserId = true;

			_originalSpUserId = _spUserId;
		}

		_spUserId = spUserId;
	}

	@Override
	public String getSpUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getSpUserId(), "uuid", _spUserUuid);
	}

	@Override
	public void setSpUserUuid(String spUserUuid) {
		_spUserUuid = spUserUuid;
	}

	public long getOriginalSpUserId() {
		return _originalSpUserId;
	}

	@JSON
	@Override
	public boolean getApActive() {
		return _apActive;
	}

	@Override
	public boolean isApActive() {
		return _apActive;
	}

	@Override
	public void setApActive(boolean apActive) {
		_apActive = apActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpUserDomain.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SpUserDomain toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpUserDomain)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpUserDomainImpl spUserDomainImpl = new SpUserDomainImpl();

		spUserDomainImpl.setSpUserDomainId(getSpUserDomainId());
		spUserDomainImpl.setSpDomainId(getSpDomainId());
		spUserDomainImpl.setSpUserId(getSpUserId());
		spUserDomainImpl.setApActive(getApActive());

		spUserDomainImpl.resetOriginalValues();

		return spUserDomainImpl;
	}

	@Override
	public int compareTo(SpUserDomain spUserDomain) {
		long primaryKey = spUserDomain.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpUserDomain)) {
			return false;
		}

		SpUserDomain spUserDomain = (SpUserDomain)obj;

		long primaryKey = spUserDomain.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SpUserDomainModelImpl spUserDomainModelImpl = this;

		spUserDomainModelImpl._originalSpDomainId = spUserDomainModelImpl._spDomainId;

		spUserDomainModelImpl._setOriginalSpDomainId = false;

		spUserDomainModelImpl._originalSpUserId = spUserDomainModelImpl._spUserId;

		spUserDomainModelImpl._setOriginalSpUserId = false;

		spUserDomainModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpUserDomain> toCacheModel() {
		SpUserDomainCacheModel spUserDomainCacheModel = new SpUserDomainCacheModel();

		spUserDomainCacheModel.spUserDomainId = getSpUserDomainId();

		spUserDomainCacheModel.spDomainId = getSpDomainId();

		spUserDomainCacheModel.spUserId = getSpUserId();

		spUserDomainCacheModel.apActive = getApActive();

		return spUserDomainCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{spUserDomainId=");
		sb.append(getSpUserDomainId());
		sb.append(", spDomainId=");
		sb.append(getSpDomainId());
		sb.append(", spUserId=");
		sb.append(getSpUserId());
		sb.append(", apActive=");
		sb.append(getApActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("science.platform.model.SpUserDomain");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spUserDomainId</column-name><column-value><![CDATA[");
		sb.append(getSpUserDomainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spDomainId</column-name><column-value><![CDATA[");
		sb.append(getSpDomainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spUserId</column-name><column-value><![CDATA[");
		sb.append(getSpUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>apActive</column-name><column-value><![CDATA[");
		sb.append(getApActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpUserDomain.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SpUserDomain.class
		};
	private long _spUserDomainId;
	private long _spDomainId;
	private long _originalSpDomainId;
	private boolean _setOriginalSpDomainId;
	private long _spUserId;
	private String _spUserUuid;
	private long _originalSpUserId;
	private boolean _setOriginalSpUserId;
	private boolean _apActive;
	private long _columnBitmask;
	private SpUserDomain _escapedModel;
}