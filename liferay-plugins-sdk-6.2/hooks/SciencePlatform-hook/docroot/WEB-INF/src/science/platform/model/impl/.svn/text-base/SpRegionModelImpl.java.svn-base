/**
 * Copyright (c) 2016-present EDISON, KISTI. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import science.platform.model.SpRegion;
import science.platform.model.SpRegionModel;
import science.platform.model.SpRegionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SpRegion service. Represents a row in the &quot;SciencePlatformHook_SpRegion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link science.platform.model.SpRegionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpRegionImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpRegionImpl
 * @see science.platform.model.SpRegion
 * @see science.platform.model.SpRegionModel
 * @generated
 */
@JSON(strict = true)
public class SpRegionModelImpl extends BaseModelImpl<SpRegion>
	implements SpRegionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sp region model instance should use the {@link science.platform.model.SpRegion} interface instead.
	 */
	public static final String TABLE_NAME = "SciencePlatformHook_SpRegion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spRegionId", Types.BIGINT },
			{ "spCountryId", Types.BIGINT },
			{ "spRegionCode", Types.VARCHAR },
			{ "spRegionName", Types.VARCHAR },
			{ "spActive", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SciencePlatformHook_SpRegion (spRegionId LONG not null primary key,spCountryId LONG,spRegionCode VARCHAR(75) null,spRegionName STRING null,spActive BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SciencePlatformHook_SpRegion";
	public static final String ORDER_BY_JPQL = " ORDER BY spRegion.spRegionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SciencePlatformHook_SpRegion.spRegionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.science.platform.model.SpRegion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.science.platform.model.SpRegion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.science.platform.model.SpRegion"),
			true);
	public static long SPCOUNTRYID_COLUMN_BITMASK = 1L;
	public static long SPREGIONCODE_COLUMN_BITMASK = 2L;
	public static long SPREGIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SpRegion toModel(SpRegionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SpRegion model = new SpRegionImpl();

		model.setSpRegionId(soapModel.getSpRegionId());
		model.setSpCountryId(soapModel.getSpCountryId());
		model.setSpRegionCode(soapModel.getSpRegionCode());
		model.setSpRegionName(soapModel.getSpRegionName());
		model.setSpActive(soapModel.getSpActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SpRegion> toModels(SpRegionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SpRegion> models = new ArrayList<SpRegion>(soapModels.length);

		for (SpRegionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.science.platform.model.SpRegion"));

	public SpRegionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spRegionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpRegionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spRegionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpRegion.class;
	}

	@Override
	public String getModelClassName() {
		return SpRegion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spRegionId", getSpRegionId());
		attributes.put("spCountryId", getSpCountryId());
		attributes.put("spRegionCode", getSpRegionCode());
		attributes.put("spRegionName", getSpRegionName());
		attributes.put("spActive", getSpActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spRegionId = (Long)attributes.get("spRegionId");

		if (spRegionId != null) {
			setSpRegionId(spRegionId);
		}

		Long spCountryId = (Long)attributes.get("spCountryId");

		if (spCountryId != null) {
			setSpCountryId(spCountryId);
		}

		String spRegionCode = (String)attributes.get("spRegionCode");

		if (spRegionCode != null) {
			setSpRegionCode(spRegionCode);
		}

		String spRegionName = (String)attributes.get("spRegionName");

		if (spRegionName != null) {
			setSpRegionName(spRegionName);
		}

		Boolean spActive = (Boolean)attributes.get("spActive");

		if (spActive != null) {
			setSpActive(spActive);
		}
	}

	@JSON
	@Override
	public long getSpRegionId() {
		return _spRegionId;
	}

	@Override
	public void setSpRegionId(long spRegionId) {
		_columnBitmask |= SPREGIONID_COLUMN_BITMASK;

		if (!_setOriginalSpRegionId) {
			_setOriginalSpRegionId = true;

			_originalSpRegionId = _spRegionId;
		}

		_spRegionId = spRegionId;
	}

	public long getOriginalSpRegionId() {
		return _originalSpRegionId;
	}

	@JSON
	@Override
	public long getSpCountryId() {
		return _spCountryId;
	}

	@Override
	public void setSpCountryId(long spCountryId) {
		_columnBitmask |= SPCOUNTRYID_COLUMN_BITMASK;

		if (!_setOriginalSpCountryId) {
			_setOriginalSpCountryId = true;

			_originalSpCountryId = _spCountryId;
		}

		_spCountryId = spCountryId;
	}

	public long getOriginalSpCountryId() {
		return _originalSpCountryId;
	}

	@JSON
	@Override
	public String getSpRegionCode() {
		if (_spRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _spRegionCode;
		}
	}

	@Override
	public void setSpRegionCode(String spRegionCode) {
		_columnBitmask |= SPREGIONCODE_COLUMN_BITMASK;

		if (_originalSpRegionCode == null) {
			_originalSpRegionCode = _spRegionCode;
		}

		_spRegionCode = spRegionCode;
	}

	public String getOriginalSpRegionCode() {
		return GetterUtil.getString(_originalSpRegionCode);
	}

	@JSON
	@Override
	public String getSpRegionName() {
		if (_spRegionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _spRegionName;
		}
	}

	@Override
	public String getSpRegionName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpRegionName(languageId);
	}

	@Override
	public String getSpRegionName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpRegionName(languageId, useDefault);
	}

	@Override
	public String getSpRegionName(String languageId) {
		return LocalizationUtil.getLocalization(getSpRegionName(), languageId);
	}

	@Override
	public String getSpRegionName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSpRegionName(), languageId,
			useDefault);
	}

	@Override
	public String getSpRegionNameCurrentLanguageId() {
		return _spRegionNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSpRegionNameCurrentValue() {
		Locale locale = getLocale(_spRegionNameCurrentLanguageId);

		return getSpRegionName(locale);
	}

	@Override
	public Map<Locale, String> getSpRegionNameMap() {
		return LocalizationUtil.getLocalizationMap(getSpRegionName());
	}

	@Override
	public void setSpRegionName(String spRegionName) {
		_spRegionName = spRegionName;
	}

	@Override
	public void setSpRegionName(String spRegionName, Locale locale) {
		setSpRegionName(spRegionName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSpRegionName(String spRegionName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(spRegionName)) {
			setSpRegionName(LocalizationUtil.updateLocalization(
					getSpRegionName(), "SpRegionName", spRegionName,
					languageId, defaultLanguageId));
		}
		else {
			setSpRegionName(LocalizationUtil.removeLocalization(
					getSpRegionName(), "SpRegionName", languageId));
		}
	}

	@Override
	public void setSpRegionNameCurrentLanguageId(String languageId) {
		_spRegionNameCurrentLanguageId = languageId;
	}

	@Override
	public void setSpRegionNameMap(Map<Locale, String> spRegionNameMap) {
		setSpRegionNameMap(spRegionNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSpRegionNameMap(Map<Locale, String> spRegionNameMap,
		Locale defaultLocale) {
		if (spRegionNameMap == null) {
			return;
		}

		setSpRegionName(LocalizationUtil.updateLocalization(spRegionNameMap,
				getSpRegionName(), "SpRegionName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getSpActive() {
		return _spActive;
	}

	@Override
	public boolean isSpActive() {
		return _spActive;
	}

	@Override
	public void setSpActive(boolean spActive) {
		_spActive = spActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpRegion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> spRegionNameMap = getSpRegionNameMap();

		for (Map.Entry<Locale, String> entry : spRegionNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSpRegionName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String spRegionName = getSpRegionName(defaultLocale);

		if (Validator.isNull(spRegionName)) {
			setSpRegionName(getSpRegionName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setSpRegionName(getSpRegionName(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public SpRegion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpRegion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpRegionImpl spRegionImpl = new SpRegionImpl();

		spRegionImpl.setSpRegionId(getSpRegionId());
		spRegionImpl.setSpCountryId(getSpCountryId());
		spRegionImpl.setSpRegionCode(getSpRegionCode());
		spRegionImpl.setSpRegionName(getSpRegionName());
		spRegionImpl.setSpActive(getSpActive());

		spRegionImpl.resetOriginalValues();

		return spRegionImpl;
	}

	@Override
	public int compareTo(SpRegion spRegion) {
		long primaryKey = spRegion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpRegion)) {
			return false;
		}

		SpRegion spRegion = (SpRegion)obj;

		long primaryKey = spRegion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SpRegionModelImpl spRegionModelImpl = this;

		spRegionModelImpl._originalSpRegionId = spRegionModelImpl._spRegionId;

		spRegionModelImpl._setOriginalSpRegionId = false;

		spRegionModelImpl._originalSpCountryId = spRegionModelImpl._spCountryId;

		spRegionModelImpl._setOriginalSpCountryId = false;

		spRegionModelImpl._originalSpRegionCode = spRegionModelImpl._spRegionCode;

		spRegionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpRegion> toCacheModel() {
		SpRegionCacheModel spRegionCacheModel = new SpRegionCacheModel();

		spRegionCacheModel.spRegionId = getSpRegionId();

		spRegionCacheModel.spCountryId = getSpCountryId();

		spRegionCacheModel.spRegionCode = getSpRegionCode();

		String spRegionCode = spRegionCacheModel.spRegionCode;

		if ((spRegionCode != null) && (spRegionCode.length() == 0)) {
			spRegionCacheModel.spRegionCode = null;
		}

		spRegionCacheModel.spRegionName = getSpRegionName();

		String spRegionName = spRegionCacheModel.spRegionName;

		if ((spRegionName != null) && (spRegionName.length() == 0)) {
			spRegionCacheModel.spRegionName = null;
		}

		spRegionCacheModel.spActive = getSpActive();

		return spRegionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{spRegionId=");
		sb.append(getSpRegionId());
		sb.append(", spCountryId=");
		sb.append(getSpCountryId());
		sb.append(", spRegionCode=");
		sb.append(getSpRegionCode());
		sb.append(", spRegionName=");
		sb.append(getSpRegionName());
		sb.append(", spActive=");
		sb.append(getSpActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("science.platform.model.SpRegion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spRegionId</column-name><column-value><![CDATA[");
		sb.append(getSpRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCountryId</column-name><column-value><![CDATA[");
		sb.append(getSpCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spRegionCode</column-name><column-value><![CDATA[");
		sb.append(getSpRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spRegionName</column-name><column-value><![CDATA[");
		sb.append(getSpRegionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spActive</column-name><column-value><![CDATA[");
		sb.append(getSpActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpRegion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SpRegion.class
		};
	private long _spRegionId;
	private long _originalSpRegionId;
	private boolean _setOriginalSpRegionId;
	private long _spCountryId;
	private long _originalSpCountryId;
	private boolean _setOriginalSpCountryId;
	private String _spRegionCode;
	private String _originalSpRegionCode;
	private String _spRegionName;
	private String _spRegionNameCurrentLanguageId;
	private boolean _spActive;
	private long _columnBitmask;
	private SpRegion _escapedModel;
}