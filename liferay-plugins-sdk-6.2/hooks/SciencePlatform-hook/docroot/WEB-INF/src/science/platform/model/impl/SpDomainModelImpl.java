/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package science.platform.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import science.platform.model.SpDomain;
import science.platform.model.SpDomainModel;
import science.platform.model.SpDomainSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the SpDomain service. Represents a row in the &quot;SciencePlatformHook_SpDomain&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link science.platform.model.SpDomainModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SpDomainImpl}.
 * </p>
 *
 * @author Jerry h. Seo
 * @see SpDomainImpl
 * @see science.platform.model.SpDomain
 * @see science.platform.model.SpDomainModel
 * @generated
 */
@JSON(strict = true)
public class SpDomainModelImpl extends BaseModelImpl<SpDomain>
	implements SpDomainModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sp domain model instance should use the {@link science.platform.model.SpDomain} interface instead.
	 */
	public static final String TABLE_NAME = "SciencePlatformHook_SpDomain";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spDomainId", Types.BIGINT },
			{ "spDomainCode", Types.VARCHAR },
			{ "spDomainName", Types.VARCHAR },
			{ "spActive", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SciencePlatformHook_SpDomain (spDomainId LONG not null primary key,spDomainCode VARCHAR(75) null,spDomainName STRING null,spActive BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SciencePlatformHook_SpDomain";
	public static final String ORDER_BY_JPQL = " ORDER BY spDomain.spDomainId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SciencePlatformHook_SpDomain.spDomainId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.science.platform.model.SpDomain"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.science.platform.model.SpDomain"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.science.platform.model.SpDomain"),
			true);
	public static long SPDOMAINCODE_COLUMN_BITMASK = 1L;
	public static long SPDOMAINID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SpDomain toModel(SpDomainSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SpDomain model = new SpDomainImpl();

		model.setSpDomainId(soapModel.getSpDomainId());
		model.setSpDomainCode(soapModel.getSpDomainCode());
		model.setSpDomainName(soapModel.getSpDomainName());
		model.setSpActive(soapModel.getSpActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SpDomain> toModels(SpDomainSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SpDomain> models = new ArrayList<SpDomain>(soapModels.length);

		for (SpDomainSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.science.platform.model.SpDomain"));

	public SpDomainModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spDomainId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpDomainId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spDomainId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SpDomain.class;
	}

	@Override
	public String getModelClassName() {
		return SpDomain.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spDomainId", getSpDomainId());
		attributes.put("spDomainCode", getSpDomainCode());
		attributes.put("spDomainName", getSpDomainName());
		attributes.put("spActive", getSpActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spDomainId = (Long)attributes.get("spDomainId");

		if (spDomainId != null) {
			setSpDomainId(spDomainId);
		}

		String spDomainCode = (String)attributes.get("spDomainCode");

		if (spDomainCode != null) {
			setSpDomainCode(spDomainCode);
		}

		String spDomainName = (String)attributes.get("spDomainName");

		if (spDomainName != null) {
			setSpDomainName(spDomainName);
		}

		Boolean spActive = (Boolean)attributes.get("spActive");

		if (spActive != null) {
			setSpActive(spActive);
		}
	}

	@JSON
	@Override
	public long getSpDomainId() {
		return _spDomainId;
	}

	@Override
	public void setSpDomainId(long spDomainId) {
		_spDomainId = spDomainId;
	}

	@JSON
	@Override
	public String getSpDomainCode() {
		if (_spDomainCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _spDomainCode;
		}
	}

	@Override
	public void setSpDomainCode(String spDomainCode) {
		_columnBitmask |= SPDOMAINCODE_COLUMN_BITMASK;

		if (_originalSpDomainCode == null) {
			_originalSpDomainCode = _spDomainCode;
		}

		_spDomainCode = spDomainCode;
	}

	public String getOriginalSpDomainCode() {
		return GetterUtil.getString(_originalSpDomainCode);
	}

	@JSON
	@Override
	public String getSpDomainName() {
		if (_spDomainName == null) {
			return StringPool.BLANK;
		}
		else {
			return _spDomainName;
		}
	}

	@Override
	public String getSpDomainName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpDomainName(languageId);
	}

	@Override
	public String getSpDomainName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getSpDomainName(languageId, useDefault);
	}

	@Override
	public String getSpDomainName(String languageId) {
		return LocalizationUtil.getLocalization(getSpDomainName(), languageId);
	}

	@Override
	public String getSpDomainName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getSpDomainName(), languageId,
			useDefault);
	}

	@Override
	public String getSpDomainNameCurrentLanguageId() {
		return _spDomainNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getSpDomainNameCurrentValue() {
		Locale locale = getLocale(_spDomainNameCurrentLanguageId);

		return getSpDomainName(locale);
	}

	@Override
	public Map<Locale, String> getSpDomainNameMap() {
		return LocalizationUtil.getLocalizationMap(getSpDomainName());
	}

	@Override
	public void setSpDomainName(String spDomainName) {
		_spDomainName = spDomainName;
	}

	@Override
	public void setSpDomainName(String spDomainName, Locale locale) {
		setSpDomainName(spDomainName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setSpDomainName(String spDomainName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(spDomainName)) {
			setSpDomainName(LocalizationUtil.updateLocalization(
					getSpDomainName(), "SpDomainName", spDomainName,
					languageId, defaultLanguageId));
		}
		else {
			setSpDomainName(LocalizationUtil.removeLocalization(
					getSpDomainName(), "SpDomainName", languageId));
		}
	}

	@Override
	public void setSpDomainNameCurrentLanguageId(String languageId) {
		_spDomainNameCurrentLanguageId = languageId;
	}

	@Override
	public void setSpDomainNameMap(Map<Locale, String> spDomainNameMap) {
		setSpDomainNameMap(spDomainNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setSpDomainNameMap(Map<Locale, String> spDomainNameMap,
		Locale defaultLocale) {
		if (spDomainNameMap == null) {
			return;
		}

		setSpDomainName(LocalizationUtil.updateLocalization(spDomainNameMap,
				getSpDomainName(), "SpDomainName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public boolean getSpActive() {
		return _spActive;
	}

	@Override
	public boolean isSpActive() {
		return _spActive;
	}

	@Override
	public void setSpActive(boolean spActive) {
		_spActive = spActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SpDomain.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> spDomainNameMap = getSpDomainNameMap();

		for (Map.Entry<Locale, String> entry : spDomainNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getSpDomainName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String spDomainName = getSpDomainName(defaultLocale);

		if (Validator.isNull(spDomainName)) {
			setSpDomainName(getSpDomainName(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setSpDomainName(getSpDomainName(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public SpDomain toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SpDomain)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SpDomainImpl spDomainImpl = new SpDomainImpl();

		spDomainImpl.setSpDomainId(getSpDomainId());
		spDomainImpl.setSpDomainCode(getSpDomainCode());
		spDomainImpl.setSpDomainName(getSpDomainName());
		spDomainImpl.setSpActive(getSpActive());

		spDomainImpl.resetOriginalValues();

		return spDomainImpl;
	}

	@Override
	public int compareTo(SpDomain spDomain) {
		long primaryKey = spDomain.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SpDomain)) {
			return false;
		}

		SpDomain spDomain = (SpDomain)obj;

		long primaryKey = spDomain.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SpDomainModelImpl spDomainModelImpl = this;

		spDomainModelImpl._originalSpDomainCode = spDomainModelImpl._spDomainCode;

		spDomainModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SpDomain> toCacheModel() {
		SpDomainCacheModel spDomainCacheModel = new SpDomainCacheModel();

		spDomainCacheModel.spDomainId = getSpDomainId();

		spDomainCacheModel.spDomainCode = getSpDomainCode();

		String spDomainCode = spDomainCacheModel.spDomainCode;

		if ((spDomainCode != null) && (spDomainCode.length() == 0)) {
			spDomainCacheModel.spDomainCode = null;
		}

		spDomainCacheModel.spDomainName = getSpDomainName();

		String spDomainName = spDomainCacheModel.spDomainName;

		if ((spDomainName != null) && (spDomainName.length() == 0)) {
			spDomainCacheModel.spDomainName = null;
		}

		spDomainCacheModel.spActive = getSpActive();

		return spDomainCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{spDomainId=");
		sb.append(getSpDomainId());
		sb.append(", spDomainCode=");
		sb.append(getSpDomainCode());
		sb.append(", spDomainName=");
		sb.append(getSpDomainName());
		sb.append(", spActive=");
		sb.append(getSpActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("science.platform.model.SpDomain");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spDomainId</column-name><column-value><![CDATA[");
		sb.append(getSpDomainId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spDomainCode</column-name><column-value><![CDATA[");
		sb.append(getSpDomainCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spDomainName</column-name><column-value><![CDATA[");
		sb.append(getSpDomainName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spActive</column-name><column-value><![CDATA[");
		sb.append(getSpActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SpDomain.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SpDomain.class
		};
	private long _spDomainId;
	private String _spDomainCode;
	private String _originalSpDomainCode;
	private String _spDomainName;
	private String _spDomainNameCurrentLanguageId;
	private boolean _spActive;
	private long _columnBitmask;
	private SpDomain _escapedModel;
}